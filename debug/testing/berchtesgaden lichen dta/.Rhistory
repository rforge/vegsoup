src <- list.files("/Users/roli/Documents/aspro extras/jp2", pattern = "jp2")#
src.path <- paste("/Users/roli/Documents/aspro\\ extras/jp2/",#
	src, sep = "")#
	#
dst.path <- paste("/Users/roli/Documents/aspro\\ extras/img/",#
	src, sep = "")#
dst.path <- gsub(".jp2", ".img", dst.path)#
gdalwarp <- paste("gdalwarp -tr 0.5 0.5 -of \"HFA\" -s_srs ESRI::/Users/roli/Documents/aspro\\ extras/prj/custom.prj -t_srs EPSG:900913", src.path,  dst.path, "-overwrite")#
#
dst2.path <- paste("/Users/roli/Dropbox/aspro/dta/jp2/", src, sep = "")#
#
gdaltranslate <- paste("gdal_translate -of \"JP2ECW\"", dst.path, dst2.path)#
#
res <- c()#
for (i in 1:length(src)) {#
	res <- c(res,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		paste("echo deleted intermediate file", dst.path[i]))#
}#
#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalwarp.sh")#
	writeLines(res, con)#
close(con)
src <- list.files("/Users/roli/Documents/aspro extras/jp2", pattern = "jp2")#
src.path <- paste("/Users/roli/Documents/aspro\\ extras/jp2/",#
	src, sep = "")#
	#
dst.path <- paste("/Users/roli/Documents/aspro\\ extras/img/",#
	src, sep = "")#
dst.path <- gsub(".jp2", ".img", dst.path)#
gdalwarp <- paste("gdalwarp -tr 0.5 0.5 -of \"HFA\" -s_srs ESRI::/Users/roli/Documents/aspro\\ extras/prj/custom.prj -t_srs EPSG:900913", src.path,  dst.path, "-overwrite")#
#
dst2.path <- paste("/Users/roli/Dropbox/aspro/dta/jp2/", src, sep = "")#
#
gdaltranslate <- paste("gdal_translate -of \"JP2ECW\"", dst.path, dst2.path)#
#
res <- c()#
for (i in 1:length(src)) {#
	res <- c(res,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}#
#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalwarp.sh")#
	writeLines(res, con)#
close(con)
src <- list.files("/Users/roli/Documents/aspro extras/jp2", pattern = "jp2")#
src.path <- paste("/Users/roli/Documents/aspro\\ extras/jp2/",#
	src, sep = "")#
	#
dst.path <- paste("/Users/roli/Documents/aspro\\ extras/img/",#
	src, sep = "")#
dst.path <- gsub(".jp2", ".img", dst.path)#
gdalwarp <- paste("gdalwarp -multi -tr 0.5 0.5 -of \"HFA\" -s_srs ESRI::/Users/roli/Documents/aspro\\ extras/prj/custom.prj -t_srs EPSG:900913", src.path,  dst.path, "-overwrite")#
#
dst2.path <- paste("/Users/roli/Dropbox/aspro/dta/jp2/", src, sep = "")#
#
gdaltranslate <- paste("gdal_translate -of \"JP2ECW\"", dst.path, dst2.path)#
#
res <- c()#
for (i in 1:length(src)) {#
	res <- c(res,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}#
#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalwarp.sh")#
	writeLines(res, con)#
close(con)
source("/Users/roli/Documents/aspro extras/R/Gdalwarp.R")
length(src)
src <- list.files("/Users/roli/Documents/aspro extras/jp2", pattern = "jp2")#
src.path <- paste("/Users/roli/Documents/aspro\\ extras/jp2/",#
	src, sep = "")#
	#
dst.path <- paste("/Users/roli/Documents/aspro\\ extras/img/",#
	src, sep = "")#
dst.path <- gsub(".jp2", ".img", dst.path)#
gdalwarp <- paste("gdalwarp -multi -tr 0.5 0.5 -of \"HFA\" -dstnodata \"255 255 255\" -s_srs ESRI::/Users/roli/Documents/aspro\\ extras/prj/custom.prj -t_srs EPSG:900913", src.path,  dst.path, "-overwrite")#
#
dst2.path <- paste("/Users/roli/Dropbox/aspro/dta/jp2/", src, sep = "")#
#
gdaltranslate <- paste("gdal_translate -of \"JP2ECW\" -a_nodata \"255 255 255\"", dst.path, dst2.path)#
#
thread1 <- c()#
for (i in 1:60) {#
	thread1 <- c(thread1,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}#
#
thread2 <- c()#
for (i in 61:120) {#
	thread2 <- c(thread2,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}
thread1
thread2
src <- list.files("/Users/roli/Documents/aspro extras/jp2", pattern = "jp2")#
src.path <- paste("/Users/roli/Documents/aspro\\ extras/jp2/",#
	src, sep = "")#
	#
dst.path <- paste("/Users/roli/Documents/aspro\\ extras/img/",#
	src, sep = "")#
dst.path <- gsub(".jp2", ".img", dst.path)#
gdalwarp <- paste("gdalwarp -multi -tr 0.5 0.5 -of \"HFA\" -dstnodata \"255 255 255\" -s_srs ESRI::/Users/roli/Documents/aspro\\ extras/prj/custom.prj -t_srs EPSG:900913", src.path,  dst.path, "-overwrite")#
#
dst2.path <- paste("/Users/roli/Dropbox/aspro/dta/jp2/", src, sep = "")#
#
gdaltranslate <- paste("gdal_translate -of \"JP2ECW\" -a_nodata \"255 255 255\"", dst.path, dst2.path)#
#
thread1 <- c()#
for (i in 1:60) {#
	thread1 <- c(thread1,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}#
#
thread2 <- c()#
for (i in 61:120) {#
	thread2 <- c(thread2,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}#
#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalwarp thread1.sh")#
	writeLines(thread1, con)#
close(con)#
#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalwarp thread2.sh")#
	writeLines(thread2, con)#
close(con)
src <- list.files("/Users/roli/Documents/aspro extras/jp2", pattern = "jp2")#
src.path <- paste("/Users/roli/Documents/aspro\\ extras/jp2/",#
	src, sep = "")#
	#
dst.path <- paste("/Users/roli/Documents/aspro\\ extras/img/",#
	src, sep = "")#
dst.path <- gsub(".jp2", ".img", dst.path)#
gdalwarp <- paste("gdalwarp -multi -tr 0.5 0.5 -of \"HFA\"",#
	# -dstnodata \"255 255 255\",#
	"-s_srs ESRI::/Users/roli/Documents/aspro\\ extras/prj/custom.prj -t_srs EPSG:900913", src.path,  dst.path, "-overwrite")#
#
dst2.path <- paste("/Users/roli/Dropbox/aspro/dta/jp2/", src, sep = "")#
#
gdaltranslate <- paste("gdal_translate -of \"JP2ECW\"",#
	# -a_nodata \"255 255 255\"",#
	dst.path, dst2.path)#
#
thread1 <- c()#
for (i in 1:60) {#
	thread1 <- c(thread1,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}#
#
thread2 <- c()#
for (i in 61:120) {#
	thread2 <- c(thread2,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}#
#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalwarp thread1.sh")#
	writeLines(thread1, con)#
close(con)#
#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalwarp thread2.sh")#
	writeLines(thread2, con)#
close(con)
#	warps map frames croped out with#
#	gdal_translate from sid files#
#	to google mercator and encodes to jp2 compressed files.#
#
src <- list.files("/Users/roli/Documents/aspro extras/img")#
src <- src[-grep(".img.aux.xml", src, fixed = TRUE)]#
src.path <- paste("/Users/roli/Documents/aspro\\ extras/img/",#
	src, sep = "")#
	#
dst.path <- paste("/Users/roli/Documents/aspro\\ extras/tif/",#
	src, sep = "")#
dst.path <- gsub(".img", ".tif", dst.path)#
gdalwarp <- paste("gdalwarp -multi -tr 0.5 0.5 -of \"GTiff\"",#
	# -dstnodata \"255 255 255\"#
	"-s_srs ESRI::/Users/roli/Documents/aspro\\ extras/prj/custom.prj -t_srs EPSG:900913", src.path, dst.path, "-overwrite")#
gdalwarp[1]
source("/Users/roli/Documents/aspro extras/R/Gdalwarp sid.R")
#	warps map frames croped out with#
#	gdal_translate from sid files#
#	to google mercator and encodes to jp2 compressed files.#
#
src <- list.files("/Users/roli/Documents/aspro extras/img")
src <- list.files("/Users/roli/Documents/aspro extras/img")#
src <- src[-grep(".img.aux.xml", src, fixed = TRUE)]
src
#	warps map frames croped out with#
#	gdal_translate from sid files#
#	to google mercator and encodes to jp2 compressed files.#
#
src <- list.files("/Users/roli/Documents/aspro extras/img")#
src <- src[-grep(".img.aux.xml", src, fixed = TRUE)]#
src.path <- paste("/Users/roli/Documents/aspro\\ extras/img/",#
	src, sep = "")#
	#
dst.path <- paste("/Users/roli/Documents/aspro\\ extras/tif/",#
	src, sep = "")#
dst.path <- gsub(".img", ".tif", dst.path)#
gdalwarp <- paste("gdalwarp -multi -tr 0.5 0.5 -of \"GTiff\"",#
	# -dstnodata \"255 255 255\"#
	"-s_srs ESRI::/Users/roli/Documents/aspro\\ extras/prj/custom.prj -t_srs EPSG:900913", src.path, dst.path, "-overwrite")#
gdalwarp[1]#
#
dst2.path <- paste("/Users/roli/Dropbox/aspro/dta/jp2/", src, sep = "")#
dst2.path <- gsub(".img", ".jp2", dst2.path)#
#
gdaltranslate <- paste("gdal_translate -of \"JP2ECW\"",#
	#	-a_nodata \"255 255 255\"",#
	dst.path, dst2.path)#
#
thread1 <- c()#
for (i in 1:60) {#
	thread1 <- c(thread1,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}#
#
thread2 <- c()#
for (i in 61:120) {#
	thread2 <- c(thread2,#
		gdalwarp[i],#
		gdaltranslate[i],#
		paste("echo processed", src[i]),#
		paste("rm", dst.path[i]),#
		"echo deleted intermediate file")#
}#
#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalwarp sid thread1.sh")#
	writeLines(thread1, con)#
close(con)#
#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalwarp sid thread2.sh")#
	writeLines(thread2, con)#
close(con)
source("/Users/roli/Documents/aspro extras/R/Gdalwarp sid.R")
files <- list.files("/Users/roli/Documents/aspro extras/sid", pattern = "sid", full.names = TRUE)#
#
con <- file("/Users/roli/Documents/aspro extras/sid/tiles.txt")#
	writeLines(files, con)#
close(con)#
#
gdalbuildvrt <- paste("gdalbuildvrt -input_file_list",#
	"/Users/roli/Documents/aspro\\ extras/sid/tiles.txt",#
	"/Users/roli/Documents/aspro\\ extras/sid/mosaic.vrt")#
con <- file("/Users/roli/Documents/aspro extras/sh/gdalbuildvrt sid.sh")#
	writeLines(gdalbuildvrt, con)#
close(con)
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)
k = 6#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")
Partitioning(prt)
table(Partitioning(prt))
Layers(prt)
dta <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "ml")
)
Layers(prt)
Layers(dta)
dta <- Layers(prt, collapse = c("hl", "sl", "tl", "tl", "ml"))
Layers(prt)
dta <- VegsoupData(qry)#
#
dta <- dta[getDistconnected(dta) == 1,]
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")
Layers(prt)
foo <- Layers(prt, collapse = c("hl", "sl", "tl", "tl", "ml"))
Layers(foo)
baa <- VegsoupDataPartition(prt, k = k, method = "flexible")
table(Partitioning(baa))
Partitioning(baa)
Partitioning(foo)
Partitioning(prt)
object = fid.prt
k = 6#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")
fid.prt <- Fidelity(prt)
object = fid.prt
p.col.width = "10mm"
p.max = .05
cnti <- Contingency(object)#
cnst <- Constancy(object)#
nc <- ncol(cnst)#
SP <- ncol(object)#
#
ft <- object@fisher.test#
N <- nrow(object)#
frq <- colSums(as.binary(object))#
siz <- table(Partitioning(object))  #
#
if (object@method == "r.g") {#
	#	automatic guess adapted from isopam()#
	stat.min <- round (0.483709 + nc * -0.003272 + N * -0.000489 + SP * 0.000384 + sqrt (nc) * -0.01475, 2) #
} else {#
	stat.min = 0	#
}#
#
#	significance symbols#
symb <- ft#
symb[ft > 0.05] <- ""#
symb[ft <= 0.05] <- "*"#
symb[ft <= 0.01] <- "**"#
symb[ft <= 0.001] <- "***"#
#
#	combine frequency table with significance symbols#
frq.ft <- matrix(paste(cnst, symb, sep = ""), #
	nrow = nrow(cnst), ncol = ncol(cnst))#
frq.ft <- data.frame(frq.ft)#
colnames(frq.ft) <- unique(Partitioning(object))#
rownames(frq.ft) <- names(object)#
  #
#	fidelity measure#
stat <- object@stat#
#
#	sort table#
stat.idx <- apply(stat, 1, which.max)	# group association by fidelity measure#
frq.ord <- stat.idx#
#
for (i in 1:length(frq.ord)) {#
	frq.ord[i] <- cnst[i, stat.idx [i]]#
}	#
#
#	sorting#
frq.top <- as.matrix(frq)[order (stat.idx, -frq.ord),]#
ord.top <- names(frq.top)#
frq.ft.top <- frq.ft[ord.top,]#
ft <- ft[ord.top,]#
stat <- stat[ord.top,]#
#
#	Filter diagnostic species#
filter1 <- apply(ft, 1, min) <= p.max#
filter2 <- apply(stat, 1, max) >= stat.min#
dia <- which(filter1 [filter2 == TRUE] == TRUE) # diagnostic species #
n.dia <- length(dia) # how many diagnostic species#
if (n.dia == 0) diag <- "No diagnostic species with given thresholds." #
if (n.dia > 0) diag <- frq.ft.top[names(dia), ]#
#
#	for later use in the bottom part of the tables#
ord.bot <- names(as.matrix(frq)[order(-frq), ])#
frq.ft.b <- frq.ft[ord.bot, ]#
    #
#	move diagnostic species to top#
if (n.dia > 0) {#
	FRQ <- rbind (diag,#
		frq.ft.b[rownames(frq.ft.b) %in% rownames (diag) == FALSE, ])#
} else {#
	FRQ <- frq.ft.b#
}#
#
#	info about diagnostic species#
dig1 <- stat.idx[names(stat.idx) %in% names (dia)]#
dig2 <- dig1[rownames(diag)]#
typ <- list ()#
for (i in 1:nc) {#
	if (length(names(dig2)[dig2 == i]) > 0) {#
		typ [i] <- paste(names(dig2)[dig2 == i], collapse = ', ')#
	} else {#
		typ [i] <- 'Nothing particularly typical'#
	}	#
}#
names (typ) <- colnames(cnst)#
#
res <- list(tab = FRQ, typical = typ)#
#
#	drop latex file#
tex <- res$tab#
#
txanames <- DecomposeNames(object, verbose = FALSE) #
txanames <- txanames[match(rownames(tex), txanames$abbr.layer),]#
#
tex <- data.frame(taxon = txanames$taxon, layer = txanames$layer, tex,#
	stringsAsFactors = FALSE)#
#
if (length(Layers(object)) < 2) {#
	tex <- tex[,-2]#
	add2caption  <- paste("All species in the same layer",#
		Layers(object),#
		". ",#
		"Fidelity measure:", object@method)#
} else{#
	add2caption  <- ""#
}#
#
caption <- paste("Fidelity table for",#
		getK(object),#
		"partitions.",#
		add2caption,#
		"Relevees per partition: ",#
		paste(names(table(Partitioning(object))),#
			table(Partitioning(object)), sep = ":", collapse = ", ")#
		)
head(tex)
p.col
p.col.width
p.col <- paste("p{", p.col.width, "}", sep = "")
col.just <- c("p{70mm}", "p{10mm}", rep(p.col, getK(object)))
col.names <- c("Taxon", "Layer", 1:getK(object))
names(tex) <- col.names#
tex <- as.matrix(tex)#
tex[tex == 0] <- "."#
#
#	tex valid filenames#
filename <- paste("FidelityTable")#
filename <- gsub(".", "_", filename, fixed = TRUE)#
filename <- gsub(" ", "_", filename, fixed = TRUE)#
filename <- paste(filename, ".tex", sep = "")#
#
latex(tex,#
	file = filename,#
	caption = caption,#
	rowname = NULL,#
	booktabs = TRUE,#
	longtable = TRUE,#
	lines.page = nrow(tex),#
	here = TRUE,#
	col.just = col.just)
Layers(fid.prt)
length(Layers(object))
source("/Users/roli/Dropbox/Rpackages/vegsoup/VegsoupDataPartitionFidelity-Methods.R")
tex.fid.prt <- Latex(fid.prt, choice = "species")
tex <- Latex(prt, choice = "sites")
Layers(dta)
tex.fid.prt.sites <- Latex(prt, choice = "sites")
tex.fid.prt.sites
class(tex.fid.prt.sites)
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)#
dta <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "ml")#
#
dta <- dta[getDistconnected(dta) == 1,]#
#
#	ind <- Indspc(dta)#
#	ind <- Indpower(dta)#
#
#std <- Stride(dta,#
#	partiton.methd = "flexible",#
#	fidelity.method = "r.g", stride = 10)#
#
#std <- Stride(dta, verbose = TRUE, stride = 5)#
#.plotVegsoupSpeciesIndicators(std)#
#
k = 6#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")#
#	prt.opt <- Optindval(prt)#
#	prt.isopam <- VegsoupDataPartition(dta, k = k, method = "isopam")#
#	prt.opt <- Optindval(prt)#
#
fid.prt <- Fidelity(prt)#
tex.fid.prt.species <- Latex(fid.prt, choice = "species")#
tex.fid.prt.sites <- Latex(prt, choice = "sites")#
#
#
#	Confus(prt, prt.opt)#
#	write.csv2(tab$tab, paste(prt@method, ".csv", sep = ""))#
#	write.csv2(tab.opt$tab, paste(prt@method, "opt.csv", sep = ""))#
#
#LaTex.input <- vector("numeric", length = getK(prt))#
#
#basic <- c("cov", "plsy", "plsx", "expo", "slope",#
#	"date", "location", "elevation", "relief",#
#	"vegetation", "substrate", "stones", "tree.diameter",#
#	"tree.twig", "bark", "pl.meta")#
#basic.tex.names <- c("Deck.", "b", "l", "Exp.", "Ink.",#
#	"Datum", "Reg.", "msm", "Rel.", "Veget.", "Subst.",#
#	"Steine", "B. Durchm", "Z. Durchm.", "Borke", "Zusatz")#
	#
#for (i in 1:k) {#
#	tex <- VegsoupDataLaTexPipe(prt, i, "part", type = "free",#
#		basic = basic, basic.tex.names = basic.tex.names, pwidth = 10) #
#	LaTex.input[i] <- tex@file.name#
#}#
#
#LaTex.input <- sapply(LaTex.input,#
#	function (x) paste(paste("\\input{", x,"}",#
#		sep = ""), "\n\t\\clearpage"))#
#
#LaTex.input <- gsub("./Tex/", "", LaTex.input)#
#con <- file("./Tex/LaTex_input.tex", "w")#
#	writeLines(LaTex.input, con)#
#close(con)
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)#
dta <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "ml"))#
#
dta <- dta[getDistconnected(dta) == 1,]#
#
#	ind <- Indspc(dta)#
#	ind <- Indpower(dta)#
#
#std <- Stride(dta,#
#	partiton.methd = "flexible",#
#	fidelity.method = "r.g", stride = 10)#
#
#std <- Stride(dta, verbose = TRUE, stride = 5)#
#.plotVegsoupSpeciesIndicators(std)#
#
k = 6#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")#
#	prt.opt <- Optindval(prt)#
#	prt.isopam <- VegsoupDataPartition(dta, k = k, method = "isopam")#
#	prt.opt <- Optindval(prt)#
#
fid.prt <- Fidelity(prt)#
tex.fid.prt.species <- Latex(fid.prt, choice = "species")#
tex.fid.prt.sites <- Latex(prt, choice = "sites")#
#
#
#	Confus(prt, prt.opt)#
#	write.csv2(tab$tab, paste(prt@method, ".csv", sep = ""))#
#	write.csv2(tab.opt$tab, paste(prt@method, "opt.csv", sep = ""))#
#
#LaTex.input <- vector("numeric", length = getK(prt))#
#
#basic <- c("cov", "plsy", "plsx", "expo", "slope",#
#	"date", "location", "elevation", "relief",#
#	"vegetation", "substrate", "stones", "tree.diameter",#
#	"tree.twig", "bark", "pl.meta")#
#basic.tex.names <- c("Deck.", "b", "l", "Exp.", "Ink.",#
#	"Datum", "Reg.", "msm", "Rel.", "Veget.", "Subst.",#
#	"Steine", "B. Durchm", "Z. Durchm.", "Borke", "Zusatz")#
	#
#for (i in 1:k) {#
#	tex <- VegsoupDataLaTexPipe(prt, i, "part", type = "free",#
#		basic = basic, basic.tex.names = basic.tex.names, pwidth = 10) #
#	LaTex.input[i] <- tex@file.name#
#}#
#
#LaTex.input <- sapply(LaTex.input,#
#	function (x) paste(paste("\\input{", x,"}",#
#		sep = ""), "\n\t\\clearpage"))#
#
#LaTex.input <- gsub("./Tex/", "", LaTex.input)#
#con <- file("./Tex/LaTex_input.tex", "w")#
#	writeLines(LaTex.input, con)#
#close(con)
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")
k = 7#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")
prt <- Optindval(prt)
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)#
dta <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "ml"))#
#
dta <- dta[getDistconnected(dta) == 1,]#
#
#	ind <- Indspc(dta)#
#	ind <- Indpower(dta)#
#
#std <- Stride(dta,#
#	partiton.methd = "flexible",#
#	fidelity.method = "r.g", stride = 10)#
#
#std <- Stride(dta, verbose = TRUE, stride = 5)#
#.plotVegsoupSpeciesIndicators(std)#
#
k = 7#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")#
prt <- Optindval(prt)#
#	prt.isopam <- VegsoupDataPartition(dta, k = k, method = "isopam")#
#	prt.opt <- Optindval(prt)#
#
fid.prt <- Fidelity(prt)#
tex.fid.prt.species <- Latex(fid.prt, choice = "species")#
tex.fid.prt.sites <- Latex(prt, choice = "sites")#
#
#
#	Confus(prt, prt.opt)#
#	write.csv2(tab$tab, paste(prt@method, ".csv", sep = ""))#
#	write.csv2(tab.opt$tab, paste(prt@method, "opt.csv", sep = ""))#
#
#LaTex.input <- vector("numeric", length = getK(prt))#
#
#basic <- c("cov", "plsy", "plsx", "expo", "slope",#
#	"date", "location", "elevation", "relief",#
#	"vegetation", "substrate", "stones", "tree.diameter",#
#	"tree.twig", "bark", "pl.meta")#
#basic.tex.names <- c("Deck.", "b", "l", "Exp.", "Ink.",#
#	"Datum", "Reg.", "msm", "Rel.", "Veget.", "Subst.",#
#	"Steine", "B. Durchm", "Z. Durchm.", "Borke", "Zusatz")#
	#
#for (i in 1:k) {#
#	tex <- VegsoupDataLaTexPipe(prt, i, "part", type = "free",#
#		basic = basic, basic.tex.names = basic.tex.names, pwidth = 10) #
#	LaTex.input[i] <- tex@file.name#
#}#
#
#LaTex.input <- sapply(LaTex.input,#
#	function (x) paste(paste("\\input{", x,"}",#
#		sep = ""), "\n\t\\clearpage"))#
#
#LaTex.input <- gsub("./Tex/", "", LaTex.input)#
#con <- file("./Tex/LaTex_input.tex", "w")#
#	writeLines(LaTex.input, con)#
#close(con)
tex.fid.prt.species
FRQ
object = fid.prt
cnti <- Contingency(object)#
cnst <- Constancy(object)#
nc <- ncol(cnst)#
SP <- ncol(object)#
#
ft <- object@fisher.test#
N <- nrow(object)#
frq <- colSums(as.binary(object))#
siz <- table(Partitioning(object))  #
#
if (object@method == "r.g") {#
	#	automatic guess adapted from isopam()#
	stat.min <- round (0.483709 + nc * -0.003272 + N * -0.000489 + SP * 0.000384 + sqrt (nc) * -0.01475, 2) #
} else {#
	stat.min = 0	#
}#
#
#	significance symbols#
symb <- ft#
symb[ft > 0.05] <- ""#
symb[ft <= 0.05] <- "*"#
symb[ft <= 0.01] <- "**"#
symb[ft <= 0.001] <- "***"#
#
#	combine frequency table with significance symbols#
frq.ft <- matrix(paste(cnst, symb, sep = ""), #
	nrow = nrow(cnst), ncol = ncol(cnst))#
frq.ft <- data.frame(frq.ft)#
colnames(frq.ft) <- unique(Partitioning(object))#
rownames(frq.ft) <- names(object)#
  #
#	fidelity measure#
stat <- object@stat#
#
#	sort table#
stat.idx <- apply(stat, 1, which.max)	# group association by fidelity measure#
frq.ord <- stat.idx#
#
for (i in 1:length(frq.ord)) {#
	frq.ord[i] <- cnst[i, stat.idx [i]]#
}	#
#
#	sorting#
frq.top <- as.matrix(frq)[order (stat.idx, -frq.ord),]#
ord.top <- names(frq.top)#
frq.ft.top <- frq.ft[ord.top,]#
ft <- ft[ord.top,]#
stat <- stat[ord.top,]#
#
#	Filter diagnostic species#
filter1 <- apply(ft, 1, min) <= p.max#
filter2 <- apply(stat, 1, max) >= stat.min#
dia <- which(filter1 [filter2 == TRUE] == TRUE) # diagnostic species #
n.dia <- length(dia) # how many diagnostic species#
if (n.dia == 0) diag <- "No diagnostic species with given thresholds." #
if (n.dia > 0) diag <- frq.ft.top[names(dia), ]#
#
#	for later use in the bottom part of the tables#
ord.bot <- names(as.matrix(frq)[order(-frq), ])#
frq.ft.b <- frq.ft[ord.bot, ]#
    #
#	move diagnostic species to top#
if (n.dia > 0) {#
	FRQ <- rbind (diag,#
		frq.ft.b[rownames(frq.ft.b) %in% rownames (diag) == FALSE, ])#
} else {#
	FRQ <- frq.ft.b#
}#
#
#	info about diagnostic species#
dig1 <- stat.idx[names(stat.idx) %in% names (dia)]#
dig2 <- dig1[rownames(diag)]#
typ <- list ()#
for (i in 1:nc) {#
	if (length(names(dig2)[dig2 == i]) > 0) {#
		typ [i] <- paste(names(dig2)[dig2 == i], collapse = ', ')#
	} else {#
		typ [i] <- 'Nothing particularly typical'#
	}	#
}#
names(typ) <- colnames(cnst)
p.max = 0.5
cnti <- Contingency(object)#
cnst <- Constancy(object)#
nc <- ncol(cnst)#
SP <- ncol(object)#
#
ft <- object@fisher.test#
N <- nrow(object)#
frq <- colSums(as.binary(object))#
siz <- table(Partitioning(object))  #
#
if (object@method == "r.g") {#
	#	automatic guess adapted from isopam()#
	stat.min <- round (0.483709 + nc * -0.003272 + N * -0.000489 + SP * 0.000384 + sqrt (nc) * -0.01475, 2) #
} else {#
	stat.min = 0	#
}#
#
#	significance symbols#
symb <- ft#
symb[ft > 0.05] <- ""#
symb[ft <= 0.05] <- "*"#
symb[ft <= 0.01] <- "**"#
symb[ft <= 0.001] <- "***"#
#
#	combine frequency table with significance symbols#
frq.ft <- matrix(paste(cnst, symb, sep = ""), #
	nrow = nrow(cnst), ncol = ncol(cnst))#
frq.ft <- data.frame(frq.ft)#
colnames(frq.ft) <- unique(Partitioning(object))#
rownames(frq.ft) <- names(object)#
  #
#	fidelity measure#
stat <- object@stat#
#
#	sort table#
stat.idx <- apply(stat, 1, which.max)	# group association by fidelity measure#
frq.ord <- stat.idx#
#
for (i in 1:length(frq.ord)) {#
	frq.ord[i] <- cnst[i, stat.idx [i]]#
}	#
#
#	sorting#
frq.top <- as.matrix(frq)[order (stat.idx, -frq.ord),]#
ord.top <- names(frq.top)#
frq.ft.top <- frq.ft[ord.top,]#
ft <- ft[ord.top,]#
stat <- stat[ord.top,]#
#
#	Filter diagnostic species#
filter1 <- apply(ft, 1, min) <= p.max#
filter2 <- apply(stat, 1, max) >= stat.min#
dia <- which(filter1 [filter2 == TRUE] == TRUE) # diagnostic species #
n.dia <- length(dia) # how many diagnostic species#
if (n.dia == 0) diag <- "No diagnostic species with given thresholds." #
if (n.dia > 0) diag <- frq.ft.top[names(dia), ]#
#
#	for later use in the bottom part of the tables#
ord.bot <- names(as.matrix(frq)[order(-frq), ])#
frq.ft.b <- frq.ft[ord.bot, ]#
    #
#	move diagnostic species to top#
if (n.dia > 0) {#
	FRQ <- rbind (diag,#
		frq.ft.b[rownames(frq.ft.b) %in% rownames (diag) == FALSE, ])#
} else {#
	FRQ <- frq.ft.b#
}#
#
#	info about diagnostic species#
dig1 <- stat.idx[names(stat.idx) %in% names (dia)]#
dig2 <- dig1[rownames(diag)]#
typ <- list ()#
for (i in 1:nc) {#
	if (length(names(dig2)[dig2 == i]) > 0) {#
		typ [i] <- paste(names(dig2)[dig2 == i], collapse = ', ')#
	} else {#
		typ [i] <- 'Nothing particularly typical'#
	}	#
}#
names(typ) <- colnames(cnst)
head(FRQ)
DecomposeNames
showMethods("DecomposeNames")
DecomposeNames(object, verbose = FALSE)$layer
txanames <- DecomposeNames(object, verbose = FALSE)$layer #
txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer),]
res$tab
res <- list(tab = FRQ, typical = typ)
res$tab
rownames(res$tab)
txanames <- DecomposeNames(object, verbose = FALSE)$layer #
txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer),]
txanames <- DecomposeNames(object, verbose = FALSE)#
txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer),]
txanames <- DecomposeNames(object, verbose = FALSE)#
txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer),]
txanames
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)
Layers(dta)
foo <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "ml"), verbose = TRUE)
foo <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "hl"), verbose = TRUE)
Layers(foo)
dta <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "hl"), verbose = TRUE)
DecomposeNames(dta)
foo <- DecomposeNames(dta)
foo
table(foo$layer)
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)#
dta <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "hl"), verbose = TRUE)#
#
dta <- dta[getDistconnected(dta) == 1,]#
#
#	ind <- Indspc(dta)#
#	ind <- Indpower(dta)#
#
#std <- Stride(dta,#
#	partiton.methd = "flexible",#
#	fidelity.method = "r.g", stride = 10)#
#
#std <- Stride(dta, verbose = TRUE, stride = 5)#
#.plotVegsoupSpeciesIndicators(std)#
#
k = 7#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")#
prt <- Optindval(prt)#
#	prt.isopam <- VegsoupDataPartition(dta, k = k, method = "isopam")#
#	prt.opt <- Optindval(prt)#
#
fid.prt <- Fidelity(prt)
foo <- DecomposeNames(fod.prt)
foo <- DecomposeNames(fid.prt)
foo
object = fid.prt
p.col.width = "10mm"
p.max = .05
cnti <- Contingency(object)#
cnst <- Constancy(object)#
nc <- ncol(cnst)#
SP <- ncol(object)#
#
ft <- object@fisher.test#
N <- nrow(object)#
frq <- colSums(as.binary(object))#
siz <- table(Partitioning(object))  #
#
if (object@method == "r.g") {#
	#	automatic guess adapted from isopam()#
	stat.min <- round (0.483709 + nc * -0.003272 + N * -0.000489 + SP * 0.000384 + sqrt (nc) * -0.01475, 2) #
} else {#
	stat.min = 0	#
}#
#
#	significance symbols#
symb <- ft#
symb[ft > 0.05] <- ""#
symb[ft <= 0.05] <- "*"#
symb[ft <= 0.01] <- "**"#
symb[ft <= 0.001] <- "***"#
#
#	combine frequency table with significance symbols#
frq.ft <- matrix(paste(cnst, symb, sep = ""), #
	nrow = nrow(cnst), ncol = ncol(cnst))#
frq.ft <- data.frame(frq.ft)#
colnames(frq.ft) <- unique(Partitioning(object))#
rownames(frq.ft) <- names(object)#
  #
#	fidelity measure#
stat <- object@stat#
#
#	sort table#
stat.idx <- apply(stat, 1, which.max)	# group association by fidelity measure#
frq.ord <- stat.idx#
#
for (i in 1:length(frq.ord)) {#
	frq.ord[i] <- cnst[i, stat.idx [i]]#
}	#
#
#	sorting#
frq.top <- as.matrix(frq)[order (stat.idx, -frq.ord),]#
ord.top <- names(frq.top)#
frq.ft.top <- frq.ft[ord.top,]#
ft <- ft[ord.top,]#
stat <- stat[ord.top,]#
#
#	Filter diagnostic species#
filter1 <- apply(ft, 1, min) <= p.max#
filter2 <- apply(stat, 1, max) >= stat.min#
dia <- which(filter1 [filter2 == TRUE] == TRUE) # diagnostic species #
n.dia <- length(dia) # how many diagnostic species#
if (n.dia == 0) diag <- "No diagnostic species with given thresholds." #
if (n.dia > 0) diag <- frq.ft.top[names(dia), ]#
#
#	for later use in the bottom part of the tables#
ord.bot <- names(as.matrix(frq)[order(-frq), ])#
frq.ft.b <- frq.ft[ord.bot, ]#
    #
#	move diagnostic species to top#
if (n.dia > 0) {#
	FRQ <- rbind (diag,#
		frq.ft.b[rownames(frq.ft.b) %in% rownames (diag) == FALSE, ])#
} else {#
	FRQ <- frq.ft.b#
}#
#
#	info about diagnostic species#
dig1 <- stat.idx[names(stat.idx) %in% names (dia)]#
dig2 <- dig1[rownames(diag)]#
typ <- list ()#
for (i in 1:nc) {#
	if (length(names(dig2)[dig2 == i]) > 0) {#
		typ [i] <- paste(names(dig2)[dig2 == i], collapse = ', ')#
	} else {#
		typ [i] <- 'Nothing particularly typical'#
	}	#
}#
names(typ) <- colnames(cnst)#
#
res <- list(tab = FRQ, typical = typ)
txanames <- DecomposeNames(object, verbose = FALSE)#
txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer),]
txanames
tex.fid.prt.species <- Latex(fid.prt, choice = "species")#
tex.fid.prt.sites <- Latex(prt, choice = "sites")#
#
#
#	Confus(prt, prt.opt)#
#	write.csv2(tab$tab, paste(prt@method, ".csv", sep = ""))#
#	write.csv2(tab.opt$tab, paste(prt@method, "opt.csv", sep = ""))#
#
#LaTex.input <- vector("numeric", length = getK(prt))#
#
#basic <- c("cov", "plsy", "plsx", "expo", "slope",#
#	"date", "location", "elevation", "relief",#
#	"vegetation", "substrate", "stones", "tree.diameter",#
#	"tree.twig", "bark", "pl.meta")#
#basic.tex.names <- c("Deck.", "b", "l", "Exp.", "Ink.",#
#	"Datum", "Reg.", "msm", "Rel.", "Veget.", "Subst.",#
#	"Steine", "B. Durchm", "Z. Durchm.", "Borke", "Zusatz")#
	#
#for (i in 1:k) {#
#	tex <- VegsoupDataLaTexPipe(prt, i, "part", type = "free",#
#		basic = basic, basic.tex.names = basic.tex.names, pwidth = 10) #
#	LaTex.input[i] <- tex@file.name#
#}#
#
#LaTex.input <- sapply(LaTex.input,#
#	function (x) paste(paste("\\input{", x,"}",#
#		sep = ""), "\n\t\\clearpage"))#
#
#LaTex.input <- gsub("./Tex/", "", LaTex.input)#
#con <- file("./Tex/LaTex_input.tex", "w")#
#	writeLines(LaTex.input, con)#
#close(con)
res$tab
head(txanames)
?split
split(txanames, txanames$layer)
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)
foo <- DecomposeNames(dta)
foo
Layers(dta)
dta <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "hl"), verbose = TRUE)
foo <- DecomposeNames(dta)
foo
names(dta)
sort(names(dta))
foo <- DecomposeNames(dta)
foo
foo[,1:3]
sort(names(dta))
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)
obj = dta; verbose = FALSE; aggregate = "mean"; collapse = c("hl", "sl", "tl", "tl", "hl")
inherits(obj, "VegsoupData")
	if (inherits(obj, "VegsoupData")) #
		res <- as(dta, "Vegsoup") else res <- obj
res
species <- SpeciesLong(res)#
	scale <- AbundanceScale(res)#
#
	collapse <- matrix(c(res@layers, collapse),#
		ncol = 2, nrow = length(res@layers),#
		byrow = FALSE,#
		dimnames = list(NULL, c("original", "collapsed")))
print(collapse)
species$layer <- factor(species$layer)
levels(species$layer)
?factor
collapse[,2]
as.character(levels(species$layer))
is.character(levels(species$layer))
	match(levels(species$layer), collapse[, 1])
collapse[match(levels(species$layer), collapse[, 1]) ,2]
levels(species$layer)
collapse[match(levels(species$layer), collapse[, 1]) ,]
source("/Users/roli/Dropbox/Rpackages/vegsoup/VegsoupData-Methods.R")
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)#
dta <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "hl"), verbose = TRUE)
DecomposeNames(dta)[,1:3]
DecomposeNames(dta)[, 1]
cbind(DecomposeNames(dta)[, 1], names(dta))
slotNames(dta)
showMethods("Abbreviation")
#	init vegbase#
source("/Users/roli/dropbox/Rpackages/vegsoup/debug/init.R")#
#
#	load data	#
setwd("~/dropbox/Rpackages/vegsoup/debug")#
#
load("species.Rdata")#
load("taxonomy.Rdata")#
load("sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "Braun-Blanquet"))#
dta <- VegsoupData(qry)#
dta <- Layers(dta, collapse = c("hl", "sl", "tl", "tl", "hl"), verbose = TRUE)#
#
dta <- dta[getDistconnected(dta) == 1,]#
#
#	ind <- Indspc(dta)#
#	ind <- Indpower(dta)#
#
#std <- Stride(dta,#
#	partiton.methd = "flexible",#
#	fidelity.method = "r.g", stride = 10)#
#
#std <- Stride(dta, verbose = TRUE, stride = 5)#
#.plotVegsoupSpeciesIndicators(std)#
#
k = 7#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")#
prt <- Optindval(prt)#
#	prt.isopam <- VegsoupDataPartition(dta, k = k, method = "isopam")#
#	prt.opt <- Optindval(prt)#
#
fid.prt <- Fidelity(prt)#
tex.fid.prt.species <- Latex(fid.prt, choice = "species")#
tex.fid.prt.sites <- Latex(prt, choice = "sites")
cnti <- Contingency(object)#
cnst <- Constancy(object)
cnst
object = fid.prt
cnst <- Constancy(object)
cnst
cnti <- Contingency(object)
cnti
cnti * cnst
cnti / cnst
cnst / cnti
smy
sym
symbols
Partitioning(object)
unique(Partitioning(object))
getK(object)
unique(Partitioning(object))
1:getK(object)
object = fid.prt
p.col.width = "10mm"
p.max = .05
cnti <- Contingency(object)#
cnst <- Constancy(object)#
nc <- ncol(cnst)#
SP <- ncol(object)#
#
ft <- object@fisher.test#
N <- nrow(object)#
frq <- colSums(as.binary(object))#
siz <- table(Partitioning(object))  #
#
if (object@method == "r.g") {#
	#	automatic guess adapted from isopam()#
	stat.min <- round (0.483709 + nc * -0.003272 + N * -0.000489 + sp * 0.000384 + sqrt (nc) * -0.01475, 2) #
} else {#
	stat.min = 0	#
}
sp <- ncol(object)
cnti <- Contingency(object)#
cnst <- Constancy(object)#
nc <- ncol(cnst)#
sp <- ncol(object)#
#
ft <- object@fisher.test#
N <- nrow(object)#
frq <- colSums(as.binary(object))#
siz <- table(Partitioning(object))  #
#
if (object@method == "r.g") {#
	#	automatic guess adapted from isopam()#
	stat.min <- round (0.483709 + nc * -0.003272 + N * -0.000489 + sp * 0.000384 + sqrt (nc) * -0.01475, 2) #
} else {#
	stat.min = 0	#
}
stat.min
cnti <- Contingency(object)#
cnst <- Constancy(object)#
nc <- ncol(cnst)#
sp <- ncol(object)#
#
ft <- object@fisher.test#
N <- nrow(object)#
frq <- colSums(as.binary(object))#
siz <- table(Partitioning(object))  #
#
if (object@method == "r.g") {#
	#	automatic guess adapted from isopam()#
	stat.min <- round (0.483709 + nc * -0.003272 + N * -0.000489 + sp * 0.000384 + sqrt (nc) * -0.01475, 2) #
} else {#
	stat.min = 0	#
}#
#
#	significance symbols#
symb <- ft#
symb[ft > 0.05] <- ""#
symb[ft <= 0.05] <- "*"#
symb[ft <= 0.01] <- "**"#
symb[ft <= 0.001] <- "***"#
#
#	combine frequency table with significance symbols#
frq.ft <- matrix(paste(cnst, symb, sep = ""), #
	nrow = nrow(cnst), ncol = ncol(cnst))#
frq.ft <- data.frame(frq.ft)#
colnames(frq.ft) <- 1:getK(object)#
rownames(frq.ft) <- names(object)#
  #
#	fidelity measure#
stat <- object@stat#
#
#	sort table#
stat.idx <- apply(stat, 1, which.max)	# group association by fidelity measure#
frq.ord <- stat.idx#
#
for (i in 1:length(frq.ord)) {#
	frq.ord[i] <- cnst[i, stat.idx [i]]#
}	#
#
#	sorting#
frq.top <- as.matrix(frq)[order(stat.idx, -frq.ord), ]#
ord.top <- names(frq.top)#
frq.ft.top <- frq.ft[ord.top, ]#
ft <- ft[ord.top, ]#
stat <- stat[ord.top, ]#
#
#	Filter diagnostic species#
filter1 <- apply(ft, 1, min) <= p.max#
filter2 <- apply(stat, 1, max) >= stat.min#
dia <- which(filter1 [filter2 == TRUE] == TRUE) # diagnostic species #
n.dia <- length(dia) # how many diagnostic species#
if (n.dia == 0) diag <- "No diagnostic species with given thresholds." #
if (n.dia > 0) diag <- frq.ft.top[names(dia), ]#
#
#	for later use in the bottom part of the tables#
ord.bot <- names(as.matrix(frq)[order(-frq), ])#
frq.ft.b <- frq.ft[ord.bot, ]#
    #
#	move diagnostic species to top#
if (n.dia > 0) {#
	res <- rbind(diag,#
		frq.ft.b[rownames(frq.ft.b) %in% rownames (diag) == FALSE, ])#
} else {#
	res <- frq.ft.b#
}#
#
#	info about diagnostic species#
dig1 <- stat.idx[names(stat.idx) %in% names (dia)]#
dig2 <- dig1[rownames(diag)]#
typ <- list ()#
for (i in 1:nc) {#
	if (length(names(dig2)[dig2 == i]) > 0) {#
		typ [i] <- paste(names(dig2)[dig2 == i], collapse = ', ')#
	} else {#
		typ [i] <- 'Nothing particularly typical'#
	}	#
}#
names(typ) <- colnames(cnst)#
#
res <- list(tab = res, typical = typ)
diag
dia
filter1
filter2
cnst <- Constancy(object)
head(cnst)
diag
rownames(diag)
rownames(diag) == FALSE
rownames(frq.ft.b)
rownames(frq.ft.b) %in% rownames(diag) == FALSE
rownames(frq.ft.b) %in% rownames(diag)
rownames(frq.ft.b) %in% rownames(diag) == FALSE
frq.ft.b
dim(frq.ft.b)
dim(object)
cnst <- Constancy(object)#
nc <- ncol(cnst)#
sp <- ncol(object)#
#
ft <- object@fisher.test#
N <- nrow(object)#
frq <- colSums(as.binary(object))#
siz <- table(Partitioning(object))  #
#
if (object@method == "r.g") {#
	#	automatic guess adapted from isopam()#
	stat.min <- round (0.483709 + nc * -0.003272 + N * -0.000489 + sp * 0.000384 + sqrt (nc) * -0.01475, 2) #
} else {#
	stat.min = 0	#
}#
#
#	significance symbols#
symb <- ft#
symb[ft > 0.05] <- ""#
symb[ft <= 0.05] <- "*"#
symb[ft <= 0.01] <- "**"#
symb[ft <= 0.001] <- "***"#
#
#	combine frequency table with significance symbols#
frq.ft <- matrix(paste(cnst, symb, sep = ""), #
	nrow = nrow(cnst), ncol = ncol(cnst))#
frq.ft <- data.frame(frq.ft)#
colnames(frq.ft) <- 1:getK(object)#
rownames(frq.ft) <- names(object)#
  #
#	fidelity measure#
stat <- object@stat#
#
#	sort table#
stat.idx <- apply(stat, 1, which.max)	# group association by fidelity measure#
frq.ord <- stat.idx#
#
for (i in 1:length(frq.ord)) {#
	frq.ord[i] <- cnst[i, stat.idx [i]]#
}	#
#
#	sorting#
frq.top <- as.matrix(frq)[order(stat.idx, -frq.ord), ]#
ord.top <- names(frq.top)#
frq.ft.top <- frq.ft[ord.top, ]#
ft <- ft[ord.top, ]#
stat <- stat[ord.top, ]#
#
#	filter diagnostic species#
filter1 <- apply(ft, 1, min) <= p.max#
filter2 <- apply(stat, 1, max) >= stat.min#
#	diagnostic species#
dia <- which(filter1 [filter2 == TRUE] == TRUE)#
#
if (length(dia) == 0) diag <- "No diagnostic species with given thresholds." #
if (length(dia) > 0) diag <- frq.ft.top[names(dia), ]#
#
#	for later use in the bottom part of the tables#
ord.bot <- names(as.matrix(frq)[order(-frq), ])#
frq.ft.b <- frq.ft[ord.bot, ]#
    #
#	move diagnostic species to top#
if (length(dia) > 0) {#
	res <- rbind(diag,#
		frq.ft.b[rownames(frq.ft.b) %in% rownames(diag) == FALSE, ])#
} else {#
	res <- frq.ft.b#
}#
#
#	info about diagnostic species#
dig1 <- stat.idx[names(stat.idx) %in% names (dia)]#
dig2 <- dig1[rownames(diag)]#
typ <- list ()#
for (i in 1:nc) {#
	if (length(names(dig2)[dig2 == i]) > 0) {#
		typ [i] <- paste(names(dig2)[dig2 == i], collapse = ', ')#
	} else {#
		typ [i] <- "Nothing particularly typical"#
	}	#
}#
names(typ) <- colnames(cnst)#
#
res <- list(tab = res, typical = typ)
res$tab
res$tab[names(diag),]
names(diag)
rownames(diag)
res$tab[rownames(diag),]
txanames <- DecomposeNames(object, verbose = FALSE)#
txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer),]
txanames
match(rownames(diag), rownames(res))
match(rownames(diag), rownames(res$tab))
	top <- res$tab[rownames(diag), ]#
	bottom <- res$tab[-match(rownames(diag), rownames(res$tab)), ]
top
bottom
top
rownames(top)
	strsplit(rownames(top), "@")
	sapply(strsplit(rownames(top), "@"), function (x) x[2])
txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer),]
head(txanames)
txanames[rownames(diag), ]
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	txanames[rownames(diag), ]
txanames
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames[rownames(diag), ]
#if (length(dia) > 0) {#
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames.top <- txanames[rownames(diag), ]
head(txanames.top)
	txanames.top <- txanames.top[order(txanames.top$layer),]
head(txanames.top)
txanames.top$layer
#if (length(dia) > 0) {#
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames.top <- txanames[rownames(diag), ]#
	txanames.top <- txanames.top[order(txanames.top$layer),]#
	#
	top <- res$tab[rownames(txanames.top), ]
top
DecomposeNames(qry)
DecomposeNames(prt)
head(DecomposeNames(prt))
head(DecomposeNames(fid.prt))
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer
txanames.bottom <- txanames[-match(rownames(diag), rownames(res$tab)), ]
txanames.bottom
txanames.bottom <- txanames.top[order(txanames.top$layer),]
#if (length(dia) > 0) {#
	#	top of table, diagnostic species#
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames.top <- txanames[rownames(diag), ]#
	txanames.top <- txanames.top[order(txanames.top$layer),]#
	top <- res$tab[rownames(txanames.top), ]#
	#
	#	bottom of table, remaining species#
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames.bottom <- txanames[-match(rownames(diag), rownames(res$tab)), ]#
	txanames.bottom <- txanames.top[order(txanames.top$layer),]#
	bottom <- res$tab[rownames(txanames.bottom), ]
bottom
txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames.bottom <- txanames[-match(rownames(diag), rownames(res$tab)), ]#
	txanames.bottom <- txanames.top[order(txanames.top$layer),]
txanames.bottom
tail(top)
#if (length(dia) > 0) {#
	#	top of table, diagnostic species#
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames.top <- txanames[rownames(diag), ]#
	txanames.top <- txanames.top[order(txanames.top$layer),]#
	top <- res$tab[rownames(txanames.top), ]#
	#
	#	bottom of table, remaining species#
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames.bottom <- txanames[-match(rownames(diag), rownames(res$tab)), ]#
	txanames.bottom <- txanames.bottom[order(txanames.top$layer),]#
	bottom <- res$tab[rownames(txanames.bottom), ]#
#}
bottom
#if (length(dia) > 0) {#
	#	top of table, diagnostic species#
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames.top <- txanames[rownames(diag), ]#
	txanames.top <- txanames.top[order(txanames.top$layer),]#
	top <- res$tab[rownames(txanames.top), ]#
	#
	#	bottom of table, remaining species#
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames.bottom <- txanames[-match(rownames(diag), rownames(res$tab)), ]#
	txanames.bottom <- txanames.bottom[order(txanames.bottom$layer),]#
	bottom <- res$tab[rownames(txanames.bottom), ]#
#}
bottom
cnst <- Constancy(object)#
nc <- ncol(cnst)#
sp <- ncol(object)#
#
ft <- object@fisher.test#
N <- nrow(object)#
frq <- colSums(as.binary(object))#
siz <- table(Partitioning(object))  #
#
if (object@method == "r.g") {#
	#	automatic guess adapted from isopam()#
	stat.min <- round (0.483709 + nc * -0.003272 + N * -0.000489 + sp * 0.000384 + sqrt (nc) * -0.01475, 2) #
} else {#
	stat.min = 0	#
}#
#
#	significance symbols#
symb <- ft#
symb[ft > 0.05] <- ""#
symb[ft <= 0.05] <- "*"#
symb[ft <= 0.01] <- "**"#
symb[ft <= 0.001] <- "***"#
#
#	combine frequency table with significance symbols#
frq.ft <- matrix(paste(cnst, symb, sep = ""), #
	nrow = nrow(cnst), ncol = ncol(cnst))#
frq.ft <- data.frame(frq.ft)#
colnames(frq.ft) <- 1:getK(object)#
rownames(frq.ft) <- names(object)#
  #
#	fidelity measure#
stat <- object@stat#
#
#	sort table#
stat.idx <- apply(stat, 1, which.max)	# group association by fidelity measure#
frq.ord <- stat.idx#
#
for (i in 1:length(frq.ord)) {#
	frq.ord[i] <- cnst[i, stat.idx [i]]#
}	#
#
#	sorting#
frq.top <- as.matrix(frq)[order(stat.idx, -frq.ord), ]#
ord.top <- names(frq.top)#
frq.ft.top <- frq.ft[ord.top, ]#
ft <- ft[ord.top, ]#
stat <- stat[ord.top, ]#
#
#	filter diagnostic species#
filter1 <- apply(ft, 1, min) <= p.max#
filter2 <- apply(stat, 1, max) >= stat.min#
#	diagnostic species#
dia <- which(filter1 [filter2 == TRUE] == TRUE)#
#
if (length(dia) == 0) diag <- "No diagnostic species with given thresholds." #
if (length(dia) > 0) diag <- frq.ft.top[names(dia), ]#
#
#	for later use in the bottom part of the tables#
ord.bot <- names(as.matrix(frq)[order(-frq), ])#
frq.ft.b <- frq.ft[ord.bot, ]#
    #
#	move diagnostic species to top#
if (length(dia) > 0) {#
	res <- rbind(diag,#
		frq.ft.b[rownames(frq.ft.b) %in% rownames(diag) == FALSE, ])#
} else {#
	res <- frq.ft.b#
}#
#
#	info about diagnostic species#
dig1 <- stat.idx[names(stat.idx) %in% names (dia)]#
dig2 <- dig1[rownames(diag)]#
typ <- list ()#
for (i in 1:nc) {#
	if (length(names(dig2)[dig2 == i]) > 0) {#
		typ [i] <- paste(names(dig2)[dig2 == i], collapse = ', ')#
	} else {#
		typ [i] <- "Nothing particularly typical"#
	}	#
}#
names(typ) <- colnames(cnst)#
#
res <- list(tab = res, typical = typ)
txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]
head(txanames)
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	txanames <- txanames[order(txanames$layer), ]
	txanames <- DecomposeNames(object, verbose = FALSE)#
	txanames <- txanames[match(rownames(res$tab), txanames$abbr.layer), ]#
	rownames(txanames) <- txanames$abbr.layer#
	txanames <- txanames[order(txanames$layer), ]
res$tab[rownames(txanames), ]
source("/Users/roli/Dropbox/Rpackages/vegsoup/VegsoupDataPartitionFidelity-Methods.R")
tex.fid.prt.species <- Latex(fid.prt, choice = "species")#
tex.fid.prt.sites <- Latex(prt, choice = "sites")
setwd("~/Dropbox/Rpackages/vegsoup/debug/testing/berchtesgaden lichen dta")#
#
species <- read.csv2("species.csv", stringsAsFactors = FALSE)#
species <- species[c("plot", "abbr","layer", "cov")]#
taxonomy <- read.csv2("taxonomy.csv", stringsAsFactors = FALSE)#
taxonomy <- taxonomy[c("abbr", "taxon")]#
sites <- read.csv2("sites.csv", stringsAsFactors = FALSE)#
#
sites[is.na(sites)] <- ""#
test <- merge(species, taxonomy,#
	by.x = "abbr", by.y = "abbr",#
	all.x = TRUE)#
#
test <- test[apply(is.na(test), 1, any),]#
if (dim(test)[1] < 1)#
{#
	cat("\nabbreviations checked")#
} else {#
	print(test)#
}#
#
dupl <- dim(species)[1] - dim(unique(species[,c(1:3)]))[1]#
#
if (dupl > 0)#
{#
	cat("\nspecies data not unique for", dupl, "sample(s)")#
	cat("\nremoved duplicted sample:\n\n")#
	print(species[duplicated(species[,c(1:3)]),])#
	species <- species[!duplicated(species[,c(1:3)]),]#
} else {#
	cat("\nno duplicates found")#
}#
#
if (any(species$cov == "") || is.na(species$cov))#
{#
	cat("\nmissing abandance for observation(s):")#
	species[species$cov == "",]#
}#
species.sites.match <- all.equal(sort(unique(species$plot)),#
	sort(unique(sites$plot)))#
if (species.sites.match)#
{#
	cat("\nspecies and sites plot names matching")#
} else {#
	cat("\nspecies and sites plot do not match")#
}#
#
#	recode charcter strings#
#	bark#
tmp <- sites[sites$variable == "bark",]#
codes <- read.csv2("bark codes.csv",#
	stringsAsFactors = FALSE)#
#	empty code, maybe a missing value?#
codes$code[is.na(codes$code)] <- ""#
#
#	reorder to match default sorting of factor#
codes <- codes[match(levels(factor(tmp$value)), codes$code), ]#
tmp$value <- as.character(factor(tmp$value,#
	labels = codes$label))#
sites[sites$variable == "bark",] <- tmp#
#
#	vegetation#
tmp <- sites[sites$variable == "vegetation",]#
codes <- read.csv2("vegetation codes.csv",#
	stringsAsFactors = FALSE)#
#	empty code, maybe a missing value?#
codes$code[is.na(codes$code)] <- ""#
#	reorder to match default sorting of factor#
codes <- codes[match(levels(factor(tmp$value)), codes$code), ]#
#
tmp$value <- as.character(factor(tmp$value,#
	labels = codes$label))#
sites[sites$variable == "vegetation",] <- tmp#
#
#	forest type#
tmp <- sites[sites$variable == "forest.type",]#
codes <- read.csv2("foresttype codes.csv",#
	stringsAsFactors = FALSE)#
#	empty code, maybe a missing value?#
codes$code[is.na(codes$code)] <- ""#
#	reorder to match default sorting of factor#
codes <- codes[match(levels(factor(tmp$value)), codes$code), ]#
#
tmp$value <- as.character(factor(tmp$value,#
	labels = codes$label))#
sites[sites$variable == "forest.type",] <- tmp#
#
#	geomorphology#
tmp <- sites[sites$variable == "geomorphology",]#
codes <- read.csv2("geomorphology codes.csv",#
	stringsAsFactors = FALSE)#
#	empty code, maybe a missing value?#
codes$code[is.na(codes$code)] <- ""#
#	reorder to match default sorting of factor#
codes <- codes[match(levels(factor(tmp$value)), codes$code), ]#
#
tmp$value <- as.character(factor(tmp$value,#
	labels = codes$label))#
sites[sites$variable == "geomorphology",] <- tmp#
#
#	check any remaining missing values#
#for (i in unique(sites$variable)) {#
#	tmp <- sites[sites$variable == i,]#
#	cat(i, "\n")#
#	print(table(tmp$value))#
#}#
#
#	combine moos (ml) and lichen (ll) layer#
#	species$layer <- "kl"#
#
save(species, file = "species.Rdata")#
save(sites, file = "sites.Rdata")#
save(taxonomy, file = "taxonomy.Rdata")#
#
system("cp species.Rdata ../../species.Rdata")#
system("cp sites.Rdata ../../sites.Rdata")#
system("cp taxonomy.Rdata ../../taxonomy.Rdata")
head(sites)
table(sites$variable)
