ls()
rm(list = ls())
ls()
data(frogs)
ls()
?frogs
pfer.bin
str(pcru.data)
pcru.data
 plot(pcru.data)
ls()
pfer.y
ls()
pcru.y
class(pcru.data)
pcru.data
data(wt)
ls()
wt.data
data(frogs)#
pferUMF <- unMarkedFrame(pfer.bin)#
fm <- occu(~1, ~1, pferUMF)#
fm
pferUMF
install.packages("cocorresp", repos="http://R-Forge.R-project.org")
library(cocorresp)
data(beetles)#
## log transform the bettle data#
beetles <- log(beetles + 1)#
data(plants)#
## fit the model#
bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")#
bp.sym#
summary(bp.sym)#
plot(bp.sym)
## predictive CoCA using SIMPLS and formula interface#
bp.pred <- coca(beetles ~ ., data = plants)#
## should retain only the useful PLS components for a parsimonious model#
## Not run: #
## Leave-one-out crossvalidation - this takes a while#
crossval(beetles, plants)
install.packages("RemoteSensing", repos="http://R-Forge.R-project.org")
demo()
smooth
citation("diptest")
library(diptest)#
library(mclust)#
library(nor1mix)#
library(kernlab)
library(rgdal)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")
coordinates(pts)
library(rgdal)#
libary(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
#
coordinates(pts) <- c("longitude", "latitude")
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
#
coordinates(pts) <- c("longitude", "latitude")
pts[1:5,]
pts$longitude
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
pts$longitude
coordinates(pts) <- c("longitude", "latitude")
plot(pts[1:200,])
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
pts$longitude#
coordinates(pts) <- c("longitude", "latitude")#
#
writeOGR(pts, "/Users/roli/Documents/javakheti/dta/shp",#
	"pt_placenames", drivers = "ESRI Shapefile")
ogrDrivers()
writeOGR(pts, "/Users/roli/Documents/javakheti/dta/shp",#
	"pt_placenames", driver = "ESRI Shapefile")
writeOGR(pts, "/Users/roli/Documents/javakheti/dta/shp/pt_placenames",	"pt_placenames", driver = "ESRI Shapefile")
class(pts)
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
pts$longitude#
coordinates(pts) <- c("longitude", "latitude")#
#
writeOGR(pts, "/Users/roli/Documents/javakheti/dta/shp/pt_placenames",	"pt_placenames", driver = "ESRI Shapefile")
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
#
pts[pts$longitude < 44,]
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
#
pts <- pts[pts$longitude < 44,]#
pts <- pts[pts$longitude > 43.3,]
coordinates(pts) <- c("longitude", "latitude")
plot(pts)
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
#
pts <- pts[pts$longitude < 44,]#
pts <- pts[pts$longitude > 43.3,]#
#
pts <- pts[pts$latitude < 41.7,]#
pts <- pts[pts$latitude > 41.1,]#
#
coordinates(pts) <- c("longitude", "latitude")
plot(pts)
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
#
pts <- pts[pts$longitude < 44,]#
pts <- pts[pts$longitude > 43.3,]#
#
pts <- pts[pts$latitude < 41.7,]#
pts <- pts[pts$latitude > 41.1,]#
#
coordinates(pts) <- c("longitude", "latitude")#
#
writeOGR(pts, "/Users/roli/Documents/javakheti/dta/shp/pt_placenames",	"pt_placenames", driver = "ESRI Shapefile")
pts@data$name
pts@data$desig
pts@data[1:5,]
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
#
pts <- pts[pts$longitude < 44,]#
pts <- pts[pts$longitude > 43.3,]#
#
pts <- pts[pts$latitude < 41.7,]#
pts <- pts[pts$latitude > 41.1,]#
#
coordinates(pts) <- c("longitude", "latitude")#
#
#	ppl populated place#
writeOGR(pts[pts@data$desig == "PPL",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_ppl",	"pt_placenames_ppl", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "MT",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_mt",	"pt_placenames_mt", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "MTS",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_mts",	"pt_placenames_mts", driver = "ESRI Shapefile")
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
#
pts <- pts[pts$longitude < 44,]#
pts <- pts[pts$longitude > 43.3,]#
#
pts <- pts[pts$latitude < 41.7,]#
pts <- pts[pts$latitude > 41.1,]#
#
coordinates(pts) <- c("longitude", "latitude")#
#
#	ppl populated place#
writeOGR(pts[pts@data$desig == "PPL",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_ppl",	"pt_placenames_ppl", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "MT",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_mt",	"pt_placenames_mt", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "MTS",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_mts",	"pt_placenames_mts", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "STM",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_stm",	"pt_placenames_stm", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "STM",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_lk",	"pt_placenames_lk", driver = "ESRI Shapefile")
library(rgdal)#
library(sp)#
#
pts <- read.csv2("/Users/roli/Documents/javakheti/dta/tb/placenames.csv")#
#
pts <- pts[pts$longitude < 44,]#
pts <- pts[pts$longitude > 43.3,]#
#
pts <- pts[pts$latitude < 41.7,]#
pts <- pts[pts$latitude > 41.1,]#
#
coordinates(pts) <- c("longitude", "latitude")#
#
#	ppl populated place#
writeOGR(pts[pts@data$desig == "PPL",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_ppl",	"pt_placenames_ppl", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "MT",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_mt",	"pt_placenames_mt", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "MTS",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_mts",	"pt_placenames_mts", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "STM",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_stm",	"pt_placenames_stm", driver = "ESRI Shapefile")#
#
writeOGR(pts[pts@data$desig == "LK",], "/Users/roli/Documents/javakheti/dta/shp/pt_placenames_lk",	"pt_placenames_lk", driver = "ESRI Shapefile")
library(rgdal)#
#
trk <- readOGR("/Users/roli/Desktop/tbc-prw.kml")
library(rgdal)#
#
trk <- readOGR("/Users/roli/Desktop/tbc-prw.kml", "track")
?readOGR
library(rgdal)#
#
trk <- readOGR("/Users/roli/Desktop/tbc-prw.kml", "track",#
	drop_unsupported_fields=TRUE)
apropos("OGR")
trk <- ogrInfo("/Users/roli/Desktop/tbc-prw.kml")
trk <- ogrInfo("/Users/roli/Desktop/tbc-prw.kml", "track")
trk <- readOGR("/Users/roli/Desktop/tbc-prw.gpx")
trk <- readOGR("/Users/roli/Desktop/tbc-prw.gpx", "track")
trk <- readOGR("/Users/roli/Desktop/tbc-prw.kml", "tracks")
trk <- readOGR("/Users/roli/Desktop/tbc-prw.gpx", "Current Track: 14 JUL 2009 09:27")
trk <- ogrInfo("/Users/roli/Desktop/tbc-prw.gpx")
trk <- ogrInfo("/Users/roli/Desktop/tbc-prw.gpx", "Current Track: 14 JUL 2009 09:27")
trk <- ogrInfo("/Users/roli/Desktop/tbc-prw.gpx", "routes")
trk <- ogrInfo("/Users/roli/Desktop/tbc-prw.gpx", "routes",#
	drop_unsupported_fields=TRUE)
trk <- readOGR("/Users/roli/Desktop/tbc-prw.gpx", "routes",#
	drop_unsupported_fields=TRUE)
trk <- readOGR("/Users/roli/Desktop/tbc-prw.gpx", "track_points",#
	drop_unsupported_fields=TRUE)
class(trk)
plot(trk)
trk <- readOGR("/Users/roli/Desktop/tbc-prw.gpx", "tracks",#
	drop_unsupported_fields=TRUE)
plot(trk)
library(rgdal)#
#
trk <- readOGR("/Users/roli/Desktop/tbc-prw.gpx", "tracks",#
	drop_unsupported_fields=TRUE)
trk@data[1:5,]
trk@data[1:50,]
trk@data[1:5,]
library(rgdal)#
#
#trk <- readOGR("/Users/roli/Desktop/tbc-prw.gpx", "tracks",#
#	drop_unsupported_fields=TRUE)#
#
ag <- readOGR("/Users/roli/Documents/javakheti/dta/gpx/Abulgyol.gpx",#
	"tracks", drop_unsupported_fields=TRUE)#
#
vg <- readOGR("/Users/roli/Documents/javakheti/dta/gpx/Avchalgyol.gpx",#
	"tracks", drop_unsupported_fields=TRUE)#
	#
wpt <- readOGR("/Users/roli/Documents/javakheti/dta/gpx/waypoints 17-07-09.gpx",#
	"waypoints", drop_unsupported_fields=TRUE)#
	#
ag <- grep("AG", wpt@data$name)#
vg <- grep("VG", wpt@data$name)#
#
ag <- wpt[ag,]#
vg <- wpt[vg,]#
#
#	groome cooridnates#
xy.vg <- coordinates(vg)#
df.vg <- vg@data#
#
xy.vg[df.vg$name == "VG16",] <- c(43.68449, 41.33450)#
xy.vg[df.vg$name == "VG27",] <- c(43.68173, 41.34003)#
xy.vg[df.vg$name == "VG26",] <- c(43.68291, 41.33428)#
#
coordinates(df.vg) <- xy.vg#
#
vg <- df.vg; rm(df.vg, xy.vg)#
#
writeOGR(ag[,c(1,4)],#
	"/Users/roli/Documents/javakheti/dta/shp/pt_ag", "pt_ag",#
	driver = "ESRI Shapefile")#
#
writeOGR(vg[,c(1,4)],#
	"/Users/roli/Documents/javakheti/dta/shp/pt_vg", "pt_vg",#
	driver = "ESRI Shapefile")
ag
library(rgdal)#
#
#trk <- readOGR("/Users/roli/Desktop/tbc-prw.gpx", "tracks",#
#	drop_unsupported_fields=TRUE)#
#
ag <- readOGR("/Users/roli/Documents/javakheti/dta/gpx/Abulgyol.gpx",#
	"tracks", drop_unsupported_fields=TRUE)#
#
vg <- readOGR("/Users/roli/Documents/javakheti/dta/gpx/Avchalgyol.gpx",#
	"tracks", drop_unsupported_fields=TRUE)#
	#
wpt <- readOGR("/Users/roli/Documents/javakheti/dta/gpx/waypoints 17-07-09.gpx",#
	"waypoints", drop_unsupported_fields=TRUE)#
	#
ag <- grep("AG", wpt@data$name)#
vg <- grep("VG", wpt@data$name)#
#
ag <- wpt[ag,]#
vg <- wpt[vg,]#
#
#	groome cooridnates#
xy.vg <- coordinates(vg)#
df.vg <- vg@data#
#
xy.vg[df.vg$name == "VG16",] <- c(43.68449, 41.33450)#
xy.vg[df.vg$name == "VG27",] <- c(43.68173, 41.34003)#
xy.vg[df.vg$name == "VG26",] <- c(43.68291, 41.33428)#
#
coordinates(df.vg) <- xy.vg#
vg <- df.vg; rm(df.vg, xy.vg)#
#
xy.ag <- coordinates(ag)#
df.ag <- ag@data#
df.ag$name <- as.character(df.ag$name)#
xy.ag[df.ag$name == "AG26",] <- c(43.62663, 41.37970)#
xy.ag <- rbind(xy.ag, xy.ag[9,])#
xy.ag[10,] <- c(43.62666, 41.37972) # add AG30#
df.ag <- rbind(df.ag, df.ag[9,])#
df.ag[10,4] <- "AG30"#
xy.ag[df.ag$name == "AG30",] <- c(43.68291, 41.33428)#
#
coordinates(df.ag) <- xy.ag#
ag <- df.ag; rm(df.ag, xy.ag)#
#
writeOGR(ag[,c(1,4)],#
	"/Users/roli/Documents/javakheti/dta/shp/pt_ag", "pt_ag",#
	driver = "ESRI Shapefile")#
#
writeOGR(vg[,c(1,4)],#
	"/Users/roli/Documents/javakheti/dta/shp/pt_vg", "pt_vg",#
	driver = "ESRI Shapefile")
ag
ag[,c(1,4)]
spc <- readcsv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")
spc <- read.csv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")
names(spc)
unique(spc$site)
spc <- read.csv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")#
#
sts <- unique(spc$site)
spc[spc$site == "ae",]
spc[spc$site == "ae",]$abbr
unique(as.charcter(spc[spc$site == "ae",]$abbr))
unique(as.character(spc[spc$site == "ae",]$abbr))
spc[spc$site == "ae",]$abbr
as.character( spc[spc$site == "ae",]$abbr)
cbind(as.character( spc[spc$site == "ae",]$abbr), 1)
data.frame(abbr = as.character( spc[spc$site == "ae",]$abbr), 1)
spc <- read.csv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")#
#
sts <- unique(spc$site)#
#
ae <- data.frame(abbr = as.character(#
	spc[spc$site == "ae",]$abbr), 1)
ae
spc <- read.csv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")#
#
sts <- unique(spc$site)#
#
ae <- data.frame(abbr = as.character(#
	spc[spc$site == "ae",]$abbr), n = 1)
names(ae)
aggregate(ae$n, by = list(ae$abbr), sum)
names(ae)
spc <- read.csv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")#
#
sts <- unique(spc$site)#
#
ae <- data.frame(abbr = as.character(#
	spc[spc$site == "ae",]$abbr), n = 1)#
ae <- aggregate(ae$n, by = list(ae$abbr), sum)
names(ae)
order(ae[,1])
ae[,1]
spc <- read.csv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")#
#
sts <- unique(spc$site)#
#
ae <- data.frame(abbr = as.character(#
	spc[spc$site == "ae",]$abbr), n = 1)#
ae <- aggregate(ae$n, by = list(ae$abbr), sum)
ae
write.csv2("/Users/roli/Documents/javakheti/dta/tb/ae list.csv")
spc <- read.csv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")#
#
sts <- unique(spc$site)#
#
ae <- data.frame(abbr = as.character(#
	spc[spc$site == "ae",]$abbr), n = 1)#
ae <- aggregate(ae$n, by = list(ae$abbr), sum)#
#
write.csv2(ae,#
	"/Users/roli/Documents/javakheti/dta/tb/ae list.csv")
spc <- read.csv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")#
#
sts <- unique(spc$site)#
#
ae <- data.frame(abbr = as.character(#
	spc[spc$site == "ae",]$abbr), n = 1)#
ae <- aggregate(ae$n, by = list(ae$abbr), sum)#
#
write.table(ae,#
	"/Users/roli/Documents/javakheti/dta/tb/ae list.txt")
spc <- read.csv2("/Users/roli/Documents/javakheti/dta/relevees/species.csv")#
#
sts <- unique(spc$site)#
#
ae <- data.frame(abbr = as.character(#
	spc[spc$site == "ae",]$abbr), n = 1)#
ae <- aggregate(ae$n, by = list(ae$abbr), sum)#
#
write.csv2(ae,#
	"/Users/roli/Documents/javakheti/dta/tb/ae list.csv")
rnorm(100)
hist(rnorm(100))
hist(rnorm(1000))
hist(rnorm(10000))
hist(rnorm(100000))
hist(rnorm(1000000))
hist(rnorm(100))
hist(rnorm(10))
?rnorm
hist(r(10))
hist(runif(10))
hist(runif(1000))
hist(runif(10000))
hist(rnorm(10000))
?rpois
hist(rpois(10000))
require(graphics)#
#
-log(dpois(0:7, lambda=1) * gamma(1+ 0:7)) # == 1#
Ni <- rpois(50, lambda = 4); table(factor(Ni, 0:max(Ni)))#
#
1 - ppois(10*(15:25), lambda=100)  # becomes 0 (cancellation)#
    ppois(10*(15:25), lambda=100, lower.tail=FALSE)     # no cancellation#
#
par(mfrow = c(2, 1))#
x <- seq(-0.01, 5, 0.01)#
plot(x, ppois(x, 1), type="s", ylab="F(x)", main="Poisson(1) CDF")#
plot(x, pbinom(x, 100, 0.01),type="s", ylab="F(x)",#
     main="Binomial(100, 0.01) CDF")
hist(rpois(100,1))
hist(rpois(10000,1))
hist(rpois(10000,2))
hist(rpois(10000,4))
hist(rpois(10000,3))
hist(rpois(10000,5))
hist(rpois(10000,8))
hist(rpois(10000,9))
hist(rpois(10000,90))
hist(rpois(100,100))
hist(rpois(100,3))
hist(rpois(10000,3))
hist(dbinom(100,3))
hist(dbinom(100,3,4))
hist(dbinom(0.33,100,0.33)))
hist(dbinom(0.33,100,0.33))
hist(dbinom(0.2,100,0.1))
hist(rbinom(100,6,1/6))
hist(rbinom(1000,6,1/6))
hist(rbinom(1000,2,1/2))
hist(rbinom(1000,1,1))
hist(rbinom(1000,2,1))
hist(rbinom(1000,2,0.5))
install.packages("RgoogleMaps", dep = T)
library(RgoogleMaps)
GetMap(markers = '40.702147,-74.015794,blues%7C40.711614,-74.012318,greeng%7C40.718217,-73.998284,redc', destfile = "MyTile1.png")
tmp <- PlotOnStaticMap(MyMap,lat = c(40.702147,40.711614,40.718217), lon = c(-74.015794,-74.012318,-73.998284), cex=1.5,pch=20,col=c('red', 'blue', 'green'), add=F)
MyMap <- GetMap.bbox(bb$lonR, bb$latR,destfile = "MyTile3.png", maptype = "satellite")
bb <- qbbox(c(40.702147,40.711614,40.718217),c(-74.015794,-74.012318,-73.998284), #
            TYPE = "all", margin = list(m=rep(5,4), TYPE = c("perc", "abs")[1]));
MyMap <- GetMap.bbox(bb$lonR, bb$latR,destfile = "MyTile3.png", maptype = "satellite")
MyMap
plot(myMap)
plot(MyMap)
bb
?qbbox
  lat = 37.85 + rnorm(100, sd=0.001);#
  lon = -120.47 + rnorm(100, sd=0.001);
lat
lon
qbbox(lat, lon, TYPE = "quantile")
?GetMap
GetMap(center = c(41.190581, 43.766578),#
zoom = 16, sensor = "satellite", dstfile = "foo.png")
GetMap(center = c(41.190581, 43.766578),#
zoom = 16, sensor = "satellite", destfile = "foo.png")
GetMap(center = c(43.766578, 41.190581),#
zoom = 16, sensor = "satellite", destfile = "foo.png")
GetMap(center = c(43.766578, 41.190581),#
zoom = 16, sensor = "terrain", destfile = "foo.png")
GetMap(center = c(43.766578, 41.190581),#
zoom = 16, sensor = "terrain")
GetMap(center = c(43.766578, 41.190581),#
zoom = 16, sensor = "terrain", format = "png")
cbind.data.frame(lat = c(40.70214, 40.71161), lon = c(-74.01579, -73.9982), size = c('tiny','mid'), col = c('blue', 'red'), char = c('','n')), destfile = "MyTile2.png")
cbind.data.frame(lat = c(40.70214, 40.71161), lon = c(-74.01579, -73.9982), size = c('tiny','mid'), col = c('blue', 'red'), char = c('','n'))
GetMap.bbox
GetMap(markers = '40.702147,-74.015794,blues%7C40.711614,-74.012318,greeng%7C40.718217,-73.998284,redc', destfile = "MyTile1.png")
GetMap(center = "43.766578, 41.190581",#
zoom = 16, sensor = "terrain", format = "png")
GetMap(markers = "43.766578, 41.190581,blues%7C",#
destfile = "foo.png")
GetMap(markers = "43.766578, 41.190581,blues",#
destfile = "foo.png")
GetMap(markers = '40.702147,-74.015794,blues%7C40.711614,-74.012318,greeng%7C40.718217,-73.998284,redc', destfile = "MyTile1.png")
GetMap(markers = '4.702147,-74.015794,blues|40.711614,-74.012318,greeng|40.718217,-73.998284,redc', destfile = "MyTile1.png")
GetMap(markers = "43.766578, 41.190581,blues|43.766578, 41.190583,blues|43.766578, 41.190582,blues",#
destfile = "foo.png")
GetMap(markers = '43.766578,41.190581,blues|43.766578,41.190583,blues|43.766578,41.190582,blues',#
destfile = "foo.png")
GetMap(markers = '43.766578,41.190581,blues|43.766578,41.190590,blues|43.766578,41.190582,blues',#
destfile = "foo.png")
GetMap(markers = '43.766578,41.190581,blues|43.766578,41.190590,blues|43.766578,41.190582,blues',#
destfile = "foo.png", sensor = "satellite")
GetMap(markers = '43.766578,41.190581,blues|43.766578,41.190590,blues|43.766578,41.190582,blues',#
destfile = "foo.png", sensor = "hybrid")
GetMap(markers = '43.766578,41.190581,blues|43.766578,41.190590,blues|43.766578,41.190582,blues',#
destfile = "foo2.png", sensor = "hybrid")
GetMap(markers = '43.766578,41.190581,blues|43.766578,41.190590,blues|43.766578,41.190582,blues',#
destfile = "foo2.png", sensor = "mobile")
GetMap(center = '43.766578,41.190581',#
destfile = "foo2.png", sensor = "mobile")
GetMap(center = '43.766578,41.190581', zoom = 16,#
destfile = "foo2.png", sensor = "mobile")
GetMap(center = '43.766578,41.190581', zoom = 16,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = '41.190581,43.766578', zoom = 16,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = '41.190581,43.766578', zoom = 19,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = '41.190581,43.766578', zoom = 12,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = "41.190581,43.766578", zoom = 12,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = "41.190581,43.766578", zoom = 16,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = "41.190581,43.766578", zoom = 14,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = "41.190581,43.766578", zoom = 14,#
markers = "41.190581,43.766578,blues",#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = "41.190581,43.766578", zoom = 14,#
markers = "41.190581,43.766578,blues,tiny",#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = "41.190581,43.766578", zoom = 14,#
markers = "41.190581,43.766578,tiny,blue",#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = "41.190581,43.766578", zoom = 14,#
markers = "41.190581,43.766578,blues",#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = "41.190581,43.766578", zoom = 14,#
markers = "41.190581,43.766578,reds",#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
GetMap(center = "41.190581,43.766578", zoom = 14,#
markers = "41.190581,43.766578,hello",#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
cbind.data.frame(lat = c(40.70214, 40.71161), lon = c(-74.01579, -73.9982), size = c('tiny','mid'), col = c('blue', 'red'), char = c('','n'))
markers
markers <- cbind.data.frame(lat = c(41.190581,43.766578), lon = c(41.190589,43.766571), size = c('tiny','mid'), col = c('blue', 'red'), char = c('','n'))#
#
GetMap(center = "41.190581,43.766578", zoom = 14,#
markers = markers,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
markers
markers <- cbind.data.frame(lat = c(41.190581,43.766578), lon = c(41.190589,43.766571), size = c('tiny','mid'), col = c('blue', 'red'), char = c('','n'))#
#
GetMap(#
markers = markers,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
markers <- cbind.data.frame(lat = c(41.190581,43.766578), lon = c(41.190589,43.766571), size = c('tiny','mid'), col = c('blue', 'red'), char = c('','n'))#
#
GetMap(zoom = 16,#
markers = markers,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
markers <- cbind.data.frame(lat = c(41.190581,43.766578), lon = c(41.190589,43.766571), size = c('tiny','mid'), col = c('blue', 'red'), char = c('','n'))#
#
GetMap(center = "41.190581,43.766578", zoom = 14,#
markers = markers,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
markers <- cbind.data.frame(lat = c(41.190581,43.766578), lon = c(41.190581,43.766578), size = c('tiny','mid'), col = c('blue', 'red'), char = c('','n'))#
#
GetMap(center = "41.190581,43.766578", zoom = 14,#
markers = markers,#
destfile = "foo2.png", sensor = "mobile", maptype ="satellite")
#	debug#
#
rm(list = ls())#
library(rgdal)#
library(RgoogleMaps)#
#
api.key <- "ABQIAAAAX_7ixnCLjnY2GD3ooUlk0BSH4rF6aoFAOUmdnsGUQe0GOhCvKhQDEQZiBd-O14Dgs85pSqA_bhxO6Q"#
#
source("/Volumes/LaCie/javakheti/R/fun_MyGetMap.R")#
#
#	read plots#
pts <- readOGR("/Volumes/LaCie/javakheti/dta/shp/pt_plots",#
	"pt_plots")#
sts <- substring(as.character(pts$plot), 1,2)#
#
#	read wetland areas#
layer <- system("ls /Volumes/LaCie/javakheti/dta/kml/lines", intern = TRUE)#
#
dsn <- paste("/Volumes/LaCie/javakheti/dta/kml/lines",#
	layer, sep = "/")#
#
kml <- apply(cbind(dsn, layer), 1,#
	function (x) list(dsn = x[1], layer = x[2]))#
#
areas <- lapply(kml, function (x) readOGR(x$dsn, x$layer))#
#
areas <- sapply(sapply(sapply(#
					areas, function (x) slot(x, "polygons")),#
				function (x) slot(x, "Polygons")),#
			function (x) slot(x, "coords"))#
			#
names(areas) <- substring(layer, 1, 4)#
#
bbox.sts <- function (x)#
{#
	res <- pts[substring(pts$plot, 1,2) == x,]	#
	bbox(res)#
}#
#
bbox.sts <- sapply(sort(unique(sts)), bbox.sts,#
	simplify = FALSE)#
cent.bbox <- function (x) c(mean(x[1,]), mean(x[2,]))#
cent.sts <- t(sapply(bbox.sts, cent.bbox))#
#
bbox.rgn <- bbox(pts)#
#
stmap.plots.path <- function (x)#
{#
#	x = paths[[1]]	#
	res <- coordinates(#
		pts[substring(pts$plot, 1,2) == x,])[,c(2,1)]#
	#res <- res[1:2,]#
	res <- paste(apply(res, 1, function (x)#
					paste(x, collapse = ",")),#
				collapse = "|")#
#
}#
#
stmap.areas.path <- function (x)#
{#
#	x = "mt"#
	res <- areas[substring(names(areas), 1, 2) %in% x]#
	res <- lapply(res, function (x) x[,c(2,1)])#
	res <- lapply(res, function (x) round(x, 3))#
	bind.coords <- function (x)#
	{#
		tmp <- x#
		res <- apply(tmp, 1, function (x) paste(x, collapse = ","))#
		res <- paste(res, collapse = "|")#
	}#
	res <- sapply(res, bind.coords)#
	res <- paste("&path=rgb:0x0000ff,weight:1|", res,#
		sep = "", collapse = "")#
	res#
}#
#
#
plots.markers.style <- function (x)#
{#
#	x = "ae"#
	res <- coordinates(pts[substring(pts$plot, 1,2) == x,])#
	res <- cbind(lat = round(res[,2], 3),#
		lon = round(res[,1], 3),#
		size = "tiny", col = "blue", char = "s")#
	#
	res <- paste(apply(res, 1,#
					function (x) paste(#
						paste(x[1:2], collapse = ","),#
						paste(x[3:length(x)], collapse = ""),#
						sep = ",")), collapse = "|")#
	res#
}#
#
plots.markers <- function (x)#
{#
#	x = "ae"#
	res <- coordinates(pts[substring(pts$plot, 1,2) == x,])#
	res <- cbind(lat = round(res[,2], 4),#
		lon = round(res[,1], 3))#
	#
	res <- paste(apply(res, 1,#
					function (x) paste(#
						paste(x[1:2], collapse = ","),#
						sep = ",")), collapse = "|")#
	res#
}#
#
sts.map <- function (x)#
{#
#	x  <- hybrid[[1]]		#
	X = x[[1]]#
	Y <- x[[2]]#
	Z <- x[[3]]#
	destfile = paste("/Volumes/LaCie/javakheti/png/",#
		X, "_", Y, ".png", sep = "")#
	myGetMap(#
	key = api.key,#
	destfile = destfile,#
	center = cent.sts[rownames(cent.sts) == X,c(2,1)],#
	markers = plots.markers(X),#
	zoom = 14,#
	maptype = Y,#
	path = Z,#
	format = "png8",#
#	size = c(120,120)#
	invisible(destfile)#
	)#
}#
#
hybrid <- vector("list", length = length(unique(sts)))#
names(hybrid) <- unique(sts)#
#
for (i in unique(sts))#
{#
#	i = unique(sts)[1]	#
hybrid[i] <- list(list(names(hybrid[i]),#
	"hybrid",#
	sapply(names(hybrid[i]), stmap.areas.path))#
	#
	)#
}#
#
lapply(hybrid[1], sts.map)#
#
#terrain <- vector("list", length = length(unique(sts)))#
#names(terrain) <- unique(sts)#
#
#for (i in unique(sts))#
#{#
#	i = unique(sts)[1]	#
#terrain[i] <- list(list(names(terrain[i]),#
#	"terrain",#
#	sapply(names(terrain[i]), stmap.path)))#
#}#
#
#lapply(terrain, sts.map)#
#
#destfile = paste("/Volumes/LaCie/javakheti/png/",#
#		"overview.png", sep = "")#
		#
#myGetMap(destfile = destfile,#
#	center = c(mean(bbox.rgn[2,]), mean(bbox.rgn[1,])),#
#	markers = plots.markers(pts),#
#	zoom = 10,#
#	maptype = "terrain",#
#	size = c(120,120)#
#	)
lapply(hybrid[2], sts.map)
#	debug#
#
rm(list = ls())#
library(rgdal)#
library(RgoogleMaps)#
#
api.key <- "ABQIAAAAX_7ixnCLjnY2GD3ooUlk0BSH4rF6aoFAOUmdnsGUQe0GOhCvKhQDEQZiBd-O14Dgs85pSqA_bhxO6Q"#
#
source("/Volumes/LaCie/javakheti/R/fun_MyGetMap.R")#
#
#	read plots#
pts <- readOGR("/Volumes/LaCie/javakheti/dta/shp/pt_plots",#
	"pt_plots")#
sts <- substring(as.character(pts$plot), 1,2)#
#
#	read wetland areas#
layer <- system("ls /Volumes/LaCie/javakheti/dta/kml/lines", intern = TRUE)#
#
dsn <- paste("/Volumes/LaCie/javakheti/dta/kml/lines",#
	layer, sep = "/")#
#
kml <- apply(cbind(dsn, layer), 1,#
	function (x) list(dsn = x[1], layer = x[2]))#
#
areas <- lapply(kml, function (x) readOGR(x$dsn, x$layer))#
#
areas <- sapply(sapply(sapply(#
					areas, function (x) slot(x, "polygons")),#
				function (x) slot(x, "Polygons")),#
			function (x) slot(x, "coords"))#
			#
names(areas) <- substring(layer, 1, 4)#
#
bbox.sts <- function (x)#
{#
	res <- pts[substring(pts$plot, 1,2) == x,]	#
	bbox(res)#
}#
#
bbox.sts <- sapply(sort(unique(sts)), bbox.sts,#
	simplify = FALSE)#
cent.bbox <- function (x) c(mean(x[1,]), mean(x[2,]))#
cent.sts <- t(sapply(bbox.sts, cent.bbox))#
#
bbox.rgn <- bbox(pts)#
#
stmap.plots.path <- function (x)#
{#
#	x = paths[[1]]	#
	res <- coordinates(#
		pts[substring(pts$plot, 1,2) == x,])[,c(2,1)]#
	#res <- res[1:2,]#
	res <- paste(apply(res, 1, function (x)#
					paste(x, collapse = ",")),#
				collapse = "|")#
#
}#
#
stmap.areas.path <- function (x)#
{#
#	x = "mt"#
	res <- areas[substring(names(areas), 1, 2) %in% x]#
	res <- lapply(res, function (x) x[,c(2,1)])#
	res <- lapply(res, function (x) round(x, 4))#
	bind.coords <- function (x)#
	{#
		tmp <- x#
		res <- apply(tmp, 1, function (x) paste(x, collapse = ","))#
		res <- paste(res, collapse = "|")#
	}#
	res <- sapply(res, bind.coords)#
	res <- paste("&path=rgb:0x0000ff,weight:1|", res,#
		sep = "", collapse = "")#
	res#
}#
#
#
plots.markers.style <- function (x)#
{#
#	x = "ae"#
	res <- coordinates(pts[substring(pts$plot, 1,2) == x,])#
	res <- cbind(lat = round(res[,2], 3),#
		lon = round(res[,1], 3),#
		size = "tiny", col = "blue", char = "s")#
	#
	res <- paste(apply(res, 1,#
					function (x) paste(#
						paste(x[1:2], collapse = ","),#
						paste(x[3:length(x)], collapse = ""),#
						sep = ",")), collapse = "|")#
	res#
}#
#
plots.markers <- function (x)#
{#
#	x = "ae"#
	res <- coordinates(pts[substring(pts$plot, 1,2) == x,])#
	res <- cbind(lat = round(res[,2], 4),#
		lon = round(res[,1], 4))#
	#
	res <- paste(apply(res, 1,#
					function (x) paste(#
						paste(x[1:2], collapse = ","),#
						sep = ",")), collapse = "|")#
	res#
}#
#
sts.map <- function (x)#
{#
#	x  <- hybrid[[1]]		#
	X = x[[1]]#
	Y <- x[[2]]#
	Z <- x[[3]]#
	destfile = paste("/Volumes/LaCie/javakheti/png/",#
		X, "_", Y, ".png", sep = "")#
	myGetMap(#
	key = api.key,#
	destfile = destfile,#
	center = cent.sts[rownames(cent.sts) == X,c(2,1)],#
	markers = plots.markers(X),#
	zoom = 14,#
	maptype = Y,#
	path = Z,#
	format = "png8",#
#	size = c(120,120)#
	invisible(destfile)#
	)#
}#
#
hybrid <- vector("list", length = length(unique(sts)))#
names(hybrid) <- unique(sts)#
#
for (i in unique(sts))#
{#
#	i = unique(sts)[1]	#
hybrid[i] <- list(list(names(hybrid[i]),#
	"hybrid",#
	sapply(names(hybrid[i]), stmap.areas.path))#
	#
	)#
}#
#
lapply(hybrid[2], sts.map)#
#
#terrain <- vector("list", length = length(unique(sts)))#
#names(terrain) <- unique(sts)#
#
#for (i in unique(sts))#
#{#
#	i = unique(sts)[1]	#
#terrain[i] <- list(list(names(terrain[i]),#
#	"terrain",#
#	sapply(names(terrain[i]), stmap.path)))#
#}#
#
#lapply(terrain, sts.map)#
#
#destfile = paste("/Volumes/LaCie/javakheti/png/",#
#		"overview.png", sep = "")#
		#
#myGetMap(destfile = destfile,#
#	center = c(mean(bbox.rgn[2,]), mean(bbox.rgn[1,])),#
#	markers = plots.markers(pts),#
#	zoom = 10,#
#	maptype = "terrain",#
#	size = c(120,120)#
#	)
#	debug#
#
rm(list = ls())#
library(rgdal)#
library(RgoogleMaps)#
#
api.key <- "ABQIAAAAX_7ixnCLjnY2GD3ooUlk0BSH4rF6aoFAOUmdnsGUQe0GOhCvKhQDEQZiBd-O14Dgs85pSqA_bhxO6Q"#
#
source("/Volumes/LaCie/javakheti/R/fun_MyGetMap.R")#
#
#	read plots#
pts <- readOGR("/Volumes/LaCie/javakheti/dta/shp/pt_plots",#
	"pt_plots")#
sts <- substring(as.character(pts$plot), 1,2)#
#
#	read wetland areas#
layer <- system("ls /Volumes/LaCie/javakheti/dta/kml/lines", intern = TRUE)#
#
dsn <- paste("/Volumes/LaCie/javakheti/dta/kml/lines",#
	layer, sep = "/")#
#
kml <- apply(cbind(dsn, layer), 1,#
	function (x) list(dsn = x[1], layer = x[2]))#
#
areas <- lapply(kml, function (x) readOGR(x$dsn, x$layer))#
#
areas <- sapply(sapply(sapply(#
					areas, function (x) slot(x, "polygons")),#
				function (x) slot(x, "Polygons")),#
			function (x) slot(x, "coords"))#
			#
names(areas) <- substring(layer, 1, 4)#
#
bbox.sts <- function (x)#
{#
	res <- pts[substring(pts$plot, 1,2) == x,]	#
	bbox(res)#
}#
#
bbox.sts <- sapply(sort(unique(sts)), bbox.sts,#
	simplify = FALSE)#
cent.bbox <- function (x) c(mean(x[1,]), mean(x[2,]))#
cent.sts <- t(sapply(bbox.sts, cent.bbox))#
#
bbox.rgn <- bbox(pts)#
#
stmap.plots.path <- function (x)#
{#
#	x = paths[[1]]	#
	res <- coordinates(#
		pts[substring(pts$plot, 1,2) == x,])[,c(2,1)]#
	#res <- res[1:2,]#
	res <- paste(apply(res, 1, function (x)#
					paste(x, collapse = ",")),#
				collapse = "|")#
#
}#
#
stmap.areas.path <- function (x)#
{#
#	x = "mt"#
	res <- areas[substring(names(areas), 1, 2) %in% x]#
	res <- lapply(res, function (x) x[,c(2,1)])#
	res <- lapply(res, function (x) round(x, 3))#
	bind.coords <- function (x)#
	{#
		tmp <- x#
		res <- apply(tmp, 1, function (x) paste(x, collapse = ","))#
		res <- paste(res, collapse = "|")#
	}#
	res <- sapply(res, bind.coords)#
	res <- paste("&path=rgb:0x0000ff,weight:1|", res,#
		sep = "", collapse = "")#
	res#
}#
#
#
plots.markers.style <- function (x)#
{#
#	x = "ae"#
	res <- coordinates(pts[substring(pts$plot, 1,2) == x,])#
	res <- cbind(lat = round(res[,2], 3),#
		lon = round(res[,1], 3),#
		size = "tiny", col = "blue", char = "s")#
	#
	res <- paste(apply(res, 1,#
					function (x) paste(#
						paste(x[1:2], collapse = ","),#
						paste(x[3:length(x)], collapse = ""),#
						sep = ",")), collapse = "|")#
	res#
}#
#
plots.markers <- function (x)#
{#
#	x = "ae"#
	res <- coordinates(pts[substring(pts$plot, 1,2) == x,])#
	res <- cbind(lat = round(res[,2], 4),#
		lon = round(res[,1], 4))#
	#
	res <- paste(apply(res, 1,#
					function (x) paste(#
						paste(x[1:2], collapse = ","),#
						sep = ",")), collapse = "|")#
	res#
}#
#
sts.map <- function (x)#
{#
#	x  <- hybrid[[1]]		#
	X = x[[1]]#
	Y <- x[[2]]#
	Z <- x[[3]]#
	destfile = paste("/Volumes/LaCie/javakheti/png/",#
		X, "_", Y, ".png", sep = "")#
	myGetMap(#
	key = api.key,#
	destfile = destfile,#
	center = cent.sts[rownames(cent.sts) == X,c(2,1)],#
	markers = plots.markers(X),#
	zoom = 14,#
	maptype = Y,#
	path = Z,#
	format = "png8",#
#	size = c(120,120)#
	invisible(destfile)#
	)#
}#
#
hybrid <- vector("list", length = length(unique(sts)))#
names(hybrid) <- unique(sts)#
#
for (i in unique(sts))#
{#
#	i = unique(sts)[1]	#
hybrid[i] <- list(list(names(hybrid[i]),#
	"hybrid",#
	sapply(names(hybrid[i]), stmap.areas.path))#
	#
	)#
}#
#
lapply(hybrid[2], sts.map)#
#
#terrain <- vector("list", length = length(unique(sts)))#
#names(terrain) <- unique(sts)#
#
#for (i in unique(sts))#
#{#
#	i = unique(sts)[1]	#
#terrain[i] <- list(list(names(terrain[i]),#
#	"terrain",#
#	sapply(names(terrain[i]), stmap.path)))#
#}#
#
#lapply(terrain, sts.map)#
#
#destfile = paste("/Volumes/LaCie/javakheti/png/",#
#		"overview.png", sep = "")#
		#
#myGetMap(destfile = destfile,#
#	center = c(mean(bbox.rgn[2,]), mean(bbox.rgn[1,])),#
#	markers = plots.markers(pts),#
#	zoom = 10,#
#	maptype = "terrain",#
#	size = c(120,120)#
#	)
library(spatstat)
  data(letterR)#
  plot(letterR, col="red")#
  plot(simplify.owin(letterR, 0.3), col="blue", add=TRUE)#
  data(chorley)#
  W <- chorley$window#
  plot(W)#
  WS <- simplify.owin(W, 2)#
  plot(WS, add=TRUE, border="green")#
  points(vertices(WS))
lapply(hybrid[3], sts.map)
?simplify.owin
simplify.owin
?simplify.owin
library(spatstat)
?simplify.owin
apropos("owin")
library(spatstat)
?simplify.owin
apropos("simp")
library(spatstat)
?simplify.owin
simplify.owin(letterR, 0.3)
apropos("owin")
?owin
simplify.owin(letterR, 0.3)
library(spatstat)
install.packages("vegan")
abbreviate("Roland Kaiser")
setwd("/Users/roli/Documents/Rpackages/vegbase/debug/riedersbach")#
#
species <- read.csv2("species.csv", stringsAsFactors = FALSE)#
taxonomy <- read.csv2("taxonomy.csv", stringsAsFactors = FALSE)#
sites <- read.csv2("sites.csv", stringsAsFactors = FALSE)#
#
test <- merge(species, taxonomy,#
	by.x = "abbr", by.y = "abbr",#
	all.x = TRUE)#
#
test <- test[apply(is.na(test), 1, any),]#
if (dim(test)[1] < 1)#
{#
	cat("\nabbreviations checked")#
} else {#
	print(test)#
}#
#
dupl <- dim(species)[1] - dim(unique(species[,c(1:4)]))[1]#
#
if (dupl > 0)#
{#
	cat("\nspecies data not unique for", dupl, "sample(s)")#
	cat("\nremoved duplicted sample:\n\n")#
	print(species[duplicated(species[,c(1:4)]),])#
	species <- species[!duplicated(species[,c(1:4)]),]#
} else {#
	cat("\nno duplicates found")#
}#
#
species.sites.match <- all.equal(sort(unique(species$plot)),#
	sort(unique(sites$plot)))#
if (species.sites.match)#
{#
	cat("\nspecies and sites plot names matching")#
} else {#
	cat("\nspecies and sites plot do not match")#
}
library(vegdata)
?tv.veg
tv.veg
fix(tv.veg)
