library(rgdal)#
#
setwd("/Users/roli/Dropbox/aspro")#
#
xls2csv <- "perl /usr/local/bin/xls2csv -x /Users/roli/Dropbox/aspro/dta/xls/fundpunkte.xls -b WINDOWS-1252 -c /Users/roli/Dropbox/aspro/dta/csv/fundpunkte.csv -a UTF-8"#
system(xls2csv)#
#
df <- read.csv("./dta/csv/fundpunkte.csv")#
#
pt <- df#
pt$longitude[is.na(pt$longitude)] <- mean(pt$longitude[!is.na(pt$longitude)])#
pt$latitude[is.na(pt$latitude)] <- mean(pt$latitude[!is.na(pt$latitude)])#
#
coordinates(pt) <- ~longitude + latitude#
proj4string(pt) <- CRS("+init=epsg:4326")#
#
writeOGR(pt, "./dta/kml/fundpunkte.kml", "fundpunkte", driver = "KML")#
#
names(pt) <- gsub(".", "_", names(pt), fixed = TRUE)#
names(pt) <- abbreviate(names(pt), 8)#
#
writeOGR(pt, "./dta/shp/pt_occurence", "pt_occurence", driver = "ESRI Shapefile")#
#
pt.ge <- spTransform(pt, CRS("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +over +no_defs"))#
writeOGR(pt.ge, "./dta/shp/pt_occurence", "pt_occurence_epsg900913", driver = "ESRI Shapefile")#
#
#	drop summary#
#
taxa.sum <- aggregate(group  ~ taxon, data = df[df$group != 99,], FUN = max)#
#
write.csv2(taxa.sum, "./dta/csv/funpunkte aggregiert.csv")#
sum(taxa.sum$group)#
#
sum(nrow(df[df$part == "Alpenvorland",]), nrow(df[df$part == "Moore",]))
library(rgdal)#
#
setwd("/Users/roli/Dropbox/aspro")#
#
xls2csv <- "perl /usr/local/bin/xls2csv -x /Users/roli/Dropbox/aspro/dta/xls/fundpunkte.xls -b WINDOWS-1252 -c /Users/roli/Dropbox/aspro/dta/csv/fundpunkte.csv -a UTF-8"#
system(xls2csv)#
#
df <- read.csv("./dta/csv/fundpunkte.csv")#
#
pt <- df#
pt$longitude[is.na(pt$longitude)] <- mean(pt$longitude[!is.na(pt$longitude)])#
pt$latitude[is.na(pt$latitude)] <- mean(pt$latitude[!is.na(pt$latitude)])
pt$longitude
pt$latitude
pt$longitude
pt$latitude
grep(",", pt$latitude)
library(rgdal)#
#
setwd("/Users/roli/Dropbox/aspro")#
#
xls2csv <- "perl /usr/local/bin/xls2csv -x /Users/roli/Dropbox/aspro/dta/xls/fundpunkte.xls -b WINDOWS-1252 -c /Users/roli/Dropbox/aspro/dta/csv/fundpunkte.csv -a UTF-8"#
system(xls2csv)#
#
df <- read.csv("./dta/csv/fundpunkte.csv")
pt$longitude
pt$latitude
as.numeric(as.charcter(pt$longitude))
as.numeric(as.character(pt$longitude))
pt$longitude
pt$latitude
as.charcter(pt$latitude)
as.character(pt$latitude)
grep("," ,as.character(pt$latitude), fixed = T)
grep(" " ,as.character(pt$latitude), fixed = T)
tail(pt)
library(rgdal)#
#
setwd("/Users/roli/Dropbox/aspro")#
#
xls2csv <- "perl /usr/local/bin/xls2csv -x /Users/roli/Dropbox/aspro/dta/xls/fundpunkte.xls -b WINDOWS-1252 -c /Users/roli/Dropbox/aspro/dta/csv/fundpunkte.csv -a UTF-8"#
system(xls2csv)#
#
df <- read.csv("./dta/csv/fundpunkte.csv")
pt <- df
head(pt)
pT$longitude
pt$longitude
pt$latitude
library(rgdal)#
#
setwd("/Users/roli/Dropbox/aspro")#
#
xls2csv <- "perl /usr/local/bin/xls2csv -x /Users/roli/Dropbox/aspro/dta/xls/fundpunkte.xls -b WINDOWS-1252 -c /Users/roli/Dropbox/aspro/dta/csv/fundpunkte.csv -a UTF-8"#
system(xls2csv)#
#
df <- read.csv("./dta/csv/fundpunkte.csv")
pt$longitude
pt$latitude
pt$latitude
as.character(pt$latitude)
as.numeric(as.character(pt$latitude))
foo <- as.numeric(as.character(pt$latitude))
is.na(foo)
which(is.na(foo))
library(rgdal)#
#
setwd("/Users/roli/Dropbox/aspro")#
#
xls2csv <- "perl /usr/local/bin/xls2csv -x /Users/roli/Dropbox/aspro/dta/xls/fundpunkte.xls -b WINDOWS-1252 -c /Users/roli/Dropbox/aspro/dta/csv/fundpunkte.csv -a UTF-8"#
system(xls2csv)#
#
df <- read.csv("./dta/csv/fundpunkte.csv")#
#
pt <- df#
#
pt$longitude[is.na(pt$longitude)] <- mean(pt$longitude[!is.na(pt$longitude)])#
pt$latitude[is.na(pt$latitude)] <- mean(pt$latitude[!is.na(pt$latitude)])
coordinates(pt) <- ~longitude + latitude#
proj4string(pt) <- CRS("+init=epsg:4326")#
#
writeOGR(pt, "./dta/kml/fundpunkte.kml", "fundpunkte", driver = "KML")#
#
names(pt) <- gsub(".", "_", names(pt), fixed = TRUE)#
names(pt) <- abbreviate(names(pt), 8)#
#
writeOGR(pt, "./dta/shp/pt_occurence", "pt_occurence", driver = "ESRI Shapefile")#
#
pt.ge <- spTransform(pt, CRS("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +over +no_defs"))#
writeOGR(pt.ge, "./dta/shp/pt_occurence", "pt_occurence_epsg900913", driver = "ESRI Shapefile")#
#
#	drop summary#
#
taxa.sum <- aggregate(group  ~ taxon, data = df[df$group != 99,], FUN = max)#
#
write.csv2(taxa.sum, "./dta/csv/funpunkte aggregiert.csv")#
sum(taxa.sum$group)#
#
sum(nrow(df[df$part == "Alpenvorland",]), nrow(df[df$part == "Moore",]))
folder <- "amadeus dta"#
taxonomy <- "/Users/roli/Dropbox/vegbase standards/austrian standard list 2008/austrian standard list 2008.csv"#
setwd(paste("~/Dropbox/Rpackages/vegbase/debug/testing/",#
	folder, sep = ""))#
#
species <- read.csv2("species.csv", stringsAsFactors = FALSE)#
species <- species[c("plot", "abbr","layer", "cov")]#
taxonomy <- read.csv2(taxonomy, stringsAsFactors = FALSE)#
taxonomy <- taxonomy[c("abbr", "taxon")]#
sites <- read.csv2("sites.csv", stringsAsFactors = FALSE)#
#
sites[is.na(sites)] <- ""#
test <- merge(species, taxonomy,#
	by.x = "abbr", by.y = "abbr",#
	all.x = TRUE)#
#
test <- test[apply(is.na(test), 1, any),]#
if (dim(test)[1] < 1)	{#
	cat("\nabbreviations checked")#
} else {#
	print(test)#
}#
#
dupl <- dim(species)[1] - dim(unique(species[,c(1:3)]))[1]#
#
if (dupl > 0) {#
	cat("\nspecies data not unique for", dupl, "sample(s)")#
	cat("\nremoved duplicted sample(s):\n\n")#
	print(species[duplicated(species[,c(1:3)]),])#
	species <- species[!duplicated(species[,c(1:3)]),]#
} else {#
	cat("\nno duplicates found")#
}#
#
species.sites.match <- all.equal(sort(unique(species$plot)),#
	sort(unique(sites$plot)))#
if (species.sites.match) {#
	cat("\nspecies and sites plot names matching")#
} else {#
	cat("\nspecies and sites plot do not match")#
	data.frame(species = sort(unique(species$plot)),#
		sites = sort(unique(sites$plot)))#
}#
#
#	stack sites data frame to match database structure#
#
sites.stack <- stack(sites)#
sites.stack[,1] <- as.character(sites.stack[,1])#
sites.stack[,2] <- as.character(sites.stack[,2])#
plot <- sites.stack[sites.stack$ind == "plot",]$values#
plot <- rep(plot, (nrow(sites.stack)/length(plot))- 1)#
sites.stack <- sites.stack[!sites.stack$ind == "plot",]#
sites.stack <- data.frame(plot,#
	variable = sites.stack[,2],#
	value = sites.stack[,1])#
sites.stack <- sites.stack[order(sites.stack$plot),]#
sites.stack[is.na(sites.stack)] <- ""#
rownames(sites.stack) <- 1:nrow(sites.stack)#
sites <- sites.stack#
#
save(species, file = "species.Rdata")#
save(sites, file = "sites.Rdata")#
save(taxonomy, file = "taxonomy.Rdata")#
#
system("cp species.Rdata ../../species.Rdata")#
system("cp sites.Rdata ../../sites.Rdata")#
system("cp taxonomy.Rdata ../../taxonomy.Rdata")
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")
names(df)
coordinates(df) <- ~lng+lat
head(df)
df$lat
df$llng
df$lng
libary(rgdal)#
#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv", colClasses = c("character", "numeric", "numeric")
)
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")
df[,2]
df[,3]
libary(rgdal)#
#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
#
coordinates(df) <- ~lng+lat
plot(df)
proj4string(df)
CRS("+init=epsg:43126")
proj4string(df) <- CRS("+init=epsg:4326")
libary(rgdal)#
#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
#
coordinates(df) <- ~lng+lat#
#
proj4string(df) <- CRS("+init=epsg:4326")
libary(rgdal)#
#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
#
coordinates(df) <- ~lng+lat#
#
proj4string(df) <- CRS("+init=epsg:4326")#
#
writeOGR(df, "/Users/roli/Dropbox/crete/dta/kml/itinerary.kml", "itinerary", driver = "KML")
libary(rgdal)#
#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
#
coordinates(df) <- ~lng+lat#
#
proj4string(df) <- CRS("+init=epsg:4326")#
#
writeOGR(df, "/Users/roli/Dropbox/crete/dta/kml/itinerary.kml", "itinerary", driver = "KML")
library(rgdal)#
#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
#
coordinates(df) <- ~lng+lat#
#
proj4string(df) <- CRS("+init=epsg:4326")#
#
writeOGR(df, "/Users/roli/Dropbox/crete/dta/kml/itinerary.kml", "itinerary", driver = "KML")
library(rgdal)#
#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")
library(rgdal)#
#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
coordinates(df) <- ~longitude + latitude
??srtm
library(geonames)
df[c("longitude", "latitude")]
library(rgdal)#
#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")
df[c("longitude", "latitude")]
GNSrtm3(df[c("longitude", "latitude")])
library(geonames)
GNsrtm3(df[c("longitude", "latitude")])
GNsrtm3(df$latitude, df$longitude)
res <- vector(length = nrow(df))
i = 1
library(rgdal)#
library(geonames)#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
res <- vector(length = nrow(df))#
for (i in 1:nrow(df)) {#
	res[i] <- GNsrtm3(df$latitude[i], df$longitude[i])#
}
res
unlist(res)
res[res < 0]
res <- unlist(res)
res[res < 0] <- 0
res
df$altitude <- res
df
coordinates(df) <- ~longitude + latitude + altitude
coordinates(df)
df@data
library(rgdal)#
library(geonames)#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
res <- vector(length = nrow(df))#
for (i in 1:nrow(df)) {#
	res[i] <- GNsrtm3(df$latitude[i], df$longitude[i])#
}#
res <- unlist(res)#
res[res < 0] <- 0#
df$altitude <- res#
#
pt <- df#
#
coordinates(pt) <- ~longitude + latitude + altitude
coordinates(pt)
data.frame(pt@data, coordinates(pt))
names(pt)
pt@data <- data.frame(pt@data, coordinates(pt))
names(pt)
library(rgdal)#
library(geonames)#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
res <- vector(length = nrow(df))#
for (i in 1:nrow(df)) {#
	res[i] <- GNsrtm3(df$latitude[i], df$longitude[i])#
}#
res <- unlist(res)#
res[res < 0] <- 0#
df$altitude <- res#
#
pt <- df#
#
coordinates(pt) <- ~longitude + latitude + altitude#
pt@data <- data.frame(pt@data, coordinates(pt))#
pt@data <- pt@data[,c(1,4,3,5,6,7,2)]
?geocode
??geocode
library(dismo)
library(rgdal)#
library(geonames)#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
res <- vector(length = nrow(df))#
for (i in 1:nrow(df)) {#
	res[i] <- GNsrtm3(df$latitude[i], df$longitude[i])#
}#
res <- unlist(res)#
res[res < 0] <- 0#
df$altitude <- res#
#
pt <- df#
#
coordinates(pt) <- ~longitude + latitude + altitude#
pt@data <- data.frame(pt@data, coordinates(pt))#
pt@data <- pt@data[,c(1,4,3,5,6,7,2)]
proj4string(pt) <- CRS("+init=epsg:4326")#
writeOGR(pt, "/Users/roli/Dropbox/crete/dta/kml/itinerary.kml", "itinerary", driver = "KML")
library(rgdal)#
library(geonames)#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
res <- vector(length = nrow(df))#
#
for (i in 1:nrow(df)) {#
	res[i] <- GNsrtm3(df$latitude[i], df$longitude[i])#
}#
#
res <- unlist(res)#
res[res < 0] <- 0#
df$altitude <- res#
#
pt <- df#
#
coordinates(pt) <- ~longitude + latitude + altitude#
pt@data <- data.frame(pt@data, coordinates(pt))#
pt@data <- pt@data[,c(1,4,3,5,6,7,2)]#
#
proj4string(pt) <- CRS("+init=epsg:4326")#
writeOGR(pt, "/Users/roli/Dropbox/crete/dta/kml/itinerary.kml", "itinerary", driver = "KML")
library(rgdal)#
library(geonames)#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
res <- vector(length = nrow(df))#
#
for (i in 1:nrow(df)) {#
	res[i] <- GNsrtm3(df$latitude[i], df$longitude[i])#
}#
#
res <- unlist(res)#
res[res < 0] <- 0#
df$altitude <- res#
#
pt <- df#
#
coordinates(pt) <- ~longitude + latitude + altitude#
pt@data <- data.frame(pt@data, coordinates(pt))#
pt@data <- pt@data[,c(1,4,3,5,6,7,2)]#
#
proj4string(pt) <- CRS("+init=epsg:4326")#
writeOGR(pt, "/Users/roli/Dropbox/crete/dta/kml/itinerary.kml", "itinerary", driver = "KML")
library(rgdal)#
library(geonames)#
df <- read.csv2("/Users/roli/Dropbox/crete/dta/csv/intinerary.csv")#
#
res <- vector(length = nrow(df))#
#
for (i in 1:nrow(df)) {#
	res[i] <- GNsrtm3(df$latitude[i], df$longitude[i])#
}#
#
res <- unlist(res)#
res[res < 0] <- 0#
df$altitude <- res#
#
pt <- df#
#
coordinates(pt) <- ~longitude + latitude + altitude#
pt@data <- data.frame(pt@data, coordinates(pt))#
pt@data <- pt@data[,c(1,4,3,5,6,7,2)]#
#
proj4string(pt) <- CRS("+init=epsg:4326")#
writeOGR(pt, "/Users/roli/Dropbox/crete/dta/kml/itinerary.kml", "itinerary", driver = "KML")
