setwd("/Users/roli/Dropbox/berchtesgaden lichen")#
detach(package:vegsoup)#
library(vegsoup)#
#
load("./dta/Rdata/species.Rdata")#
load("./dta/Rdata/taxonomy.Rdata")#
load("./dta/Rdata/sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "frequency"))#
dta <- VegsoupData(qry)#
#
df <- cbind(y = log(Richness(dta, "sample")), x = dta$altitude)#
df <- df[df[,2] != 0,]#
plot(y ~x, data = df)#
fit <- loess(y ~x, data = as.data.frame(df))$fitted#
lines(spline(df[,2], fit))#
#
dta <- dta[getDistconnected(dta) == 1,]#
dta <- dta[rowSums(dta) > 3, ]#
dta <- dta[ ,colSums(dta) > 3]#
#
#
#
#
#
#
#
#
#
#
k = 21#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")#
#
#
#
#
fid.prt <- Fidelity(prt, method = "TCR")#
tex.fid.prt.species <- Latex(fid.prt, choice = "species", filename = "./tex/FidelityTable")#
tex.fid.prt.sites <- Latex(prt, choice = "sites", filename = "./tex/SitesPartitionTable")
fid.prt <- Fidelity(prt, method = "TCR")
tex.fid.prt.species <- Latex(fid.prt, choice = "species", filename = "./tex/FidelityTable")
tex.fid.prt.sites <- Latex(prt, choice = "sites", filename = "./tex/SitesPartitionTable")
?Fidelity
fid.prt <- Fidelity(prt, method = "CR")#
tex.fid.prt.species <- Latex(fid.prt, choice = "species", filename = "./tex/FidelityTable")#
tex.fid.prt.sites <- Latex(prt, choice = "sites", filename = "./tex/SitesPartitionTable")
fid.prt <- Fidelity(prt, method = "r.g")#
tex.fid.prt.species <- Latex(fid.prt, choice = "species", filename = "./tex/FidelityTable")#
tex.fid.prt.sites <- Latex(prt, choice = "sites", filename = "./tex/SitesPartitionTable")
fid.prt <- Fidelity(prt, method = "u.binA")#
tex.fid.prt.species <- Latex(fid.prt, choice = "species", filename = "./tex/FidelityTable")#
tex.fid.prt.sites <- Latex(prt, choice = "sites", filename = "./tex/SitesPartitionTable")
tex.species.recursive <- Latex(prt, choice = "species", recursive = TRUE, path = "./tex/")
tex.fid.prt.sites
tex.fid.prt.species
setwd("/Users/roli/Dropbox/berchtesgaden lichen")#
detach(package:vegsoup)#
library(vegsoup)#
#
load("./dta/Rdata/species.Rdata")#
load("./dta/Rdata/taxonomy.Rdata")#
load("./dta/Rdata/sites.Rdata")#
qry <- Vegsoup(species, sites, taxonomy,#
	scale = list(scale = "frequency"))#
dta <- VegsoupData(qry)#
#
df <- cbind(y = log(Richness(dta, "sample")), x = dta$altitude)#
df <- df[df[,2] != 0,]#
plot(y ~x, data = df)#
fit <- loess(y ~x, data = as.data.frame(df))$fitted#
lines(spline(df[,2], fit))#
#
dta <- dta[getDistconnected(dta) == 1,]#
dta <- dta[rowSums(dta) > 3, ]#
dta <- dta[ ,colSums(dta) > 3]#
#
#
#
#
#
#
#
#
#
#
k = 2#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")#
#
#
#
#
fid.prt <- Fidelity(prt, method = "u.binA")#
tex.fid.prt.species <- Latex(fid.prt, choice = "species", filename = "./tex/FidelityTable")#
tex.fid.prt.sites <- Latex(prt, choice = "sites", filename = "./tex/SitesPartitionTable")
detach(package:maptree)#
detach(package:rpart)#
detach(package:mvpart)#
detach(package:Hmisc)#
#
library(mvpart)#
#
#
#
dis <- gdist(as.binary(dta), meth = "bray", full = TRUE, sq = TRUE)#
fit <- mvpart(dis ~ altitude + slope + dbh + exp + exp.trunk + forest.type + geomorphology + slope + substrate + vegetation,#
	data = Sites(dta), method = "dist")#
fit <- mvpart(dis ~ slope + dbh + exp + exp.trunk + forest.type + geomorphology + slope + substrate + vegetation + altitude,#
	data = Sites(dta), method = "dist")#
library(maptree)#
#
#
#
draw.tree(fit,#
	nodeinfo = TRUE, digits = 2, cex = 0.5)#
#
#
#
part <- fit$frame#
part$var <- as.character(part$var)#
part$var[grep("leaf", part$var)] <-#
	seq(along = grep("leaf", part$var))#
#
part <- as.numeric(part[fit$where,]$var)#
names(part) <- names(fit$where)#
#
prt.tree <- VegsoupDataPartition(dta, k = k,#
	method = "external", clustering = part)#
#
VegsoupPartitionSpreadHeatmap(prt.tree,#
	margins = c(1, 4))#
	#
#
tex.fid.prt.species <- Latex(prt.tree, choice = "species", filename = "./tex/FidelityTableMvpart"))#
tex.fid.prt.sites <- Latex(prt.tree, choice = "sites", filename = "./tex/SitesPartitionTableMvpart")
detach(package:maptree)#
detach(package:rpart)#
detach(package:mvpart)#
detach(package:Hmisc)#
#
library(mvpart)#
#
#
#
dis <- gdist(as.binary(dta), meth = "bray", full = TRUE, sq = TRUE)#
fit <- mvpart(dis ~ altitude + slope + dbh + exp + exp.trunk + forest.type + geomorphology + slope + substrate + vegetation,#
	data = Sites(dta), method = "dist")#
#
#
library(maptree)#
#
#
#
draw.tree(fit,#
	nodeinfo = TRUE, digits = 2, cex = 0.5)#
#
#
#
part <- fit$frame#
part$var <- as.character(part$var)#
part$var[grep("leaf", part$var)] <-#
	seq(along = grep("leaf", part$var))#
#
part <- as.numeric(part[fit$where,]$var)#
names(part) <- names(fit$where)#
#
prt.tree <- VegsoupDataPartition(dta, k = k,#
	method = "external", clustering = part)#
#
VegsoupPartitionSpreadHeatmap(prt.tree,#
	margins = c(1, 4))#
	#
#
tex.fid.prt.species <- Latex(prt.tree, choice = "species", filename = "./tex/FidelityTableMvpart"))#
tex.fid.prt.sites <- Latex(prt.tree, choice = "sites", filename = "./tex/SitesPartitionTableMvpart")
Confus(prt, prt.tree)
getK(prt.tree)
k = 8#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")
Confus(prt, prt.tree)
k = 8#
#
prt <- VegsoupDataPartition(dta, k = k, method = "flexible")#
#
#
#
#
fid.prt <- Fidelity(prt, method = "u.binA")#
tex.fid.prt.species <- Latex(fid.prt, choice = "species", filename = "./tex/FidelityTable")#
tex.fid.prt.sites <- Latex(prt, choice = "sites", filename = "./tex/SitesPartitionTable")
VegsoupPartitionSpreadHeatmap(prt.tree,#
	margins = c(1, 4))#
	#
#
tex.fid.prt.species <- Latex(prt.tree, choice = "species", filename = "./tex/FidelityTableMvpart"))#
tex.fid.prt.sites <- Latex(prt.tree, choice = "sites", filename = "./tex/SitesPartitionTableMvpart")
detach(package:maptree)#
detach(package:rpart)#
detach(package:mvpart)#
detach(package:Hmisc)#
#
library(mvpart)#
#
#
#
dis <- gdist(as.binary(dta), meth = "bray", full = TRUE, sq = TRUE)#
fit <- mvpart(dis ~ altitude + slope + dbh + exp + exp.trunk + forest.type + geomorphology + slope + substrate + vegetation,#
	data = Sites(dta), method = "dist")#
#
#
library(maptree)#
#
#
#
draw.tree(fit,#
	nodeinfo = TRUE, digits = 2, cex = 0.5)#
#
#
#
part <- fit$frame#
part$var <- as.character(part$var)#
part$var[grep("leaf", part$var)] <-#
	seq(along = grep("leaf", part$var))#
#
part <- as.numeric(part[fit$where,]$var)#
names(part) <- names(fit$where)#
#
prt.tree <- VegsoupDataPartition(dta, k = k,#
	method = "external", clustering = part)#
#
Confus(prt, prt.tree)#
VegsoupPartitionSpreadHeatmap(prt.tree,#
	margins = c(1, 4))#
	#
#
tex.fid.prt.species <- Latex(prt.tree, choice = "species", filename = "./tex/FidelityTableMvpart"))#
tex.fid.prt.sites <- Latex(prt.tree, choice = "sites", filename = "./tex/SitesPartitionTableMvpart")
library(maptree)#
pdf("./res/pdf/rpart tree.pdf",#
	width = 29.7/2.54, height = 21/2.54)#
#
draw.tree(fit,#
	nodeinfo = TRUE, digits = 2, cex = 0.5)#
#
dev.off()
dim(prt)
317/54
317 * 100/54
317 /54 * 100
317 *54 / 100
317 /100 *54
names(Sites(prt))
prt$substrate
unique(prt$substrate)
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
setwd("/Users/roli/Documents/vegsoup/testing/berchtesgaden lichen dta")#
#
species <- read.csv2("species.csv", stringsAsFactors = FALSE)#
species <- species[c("plot", "abbr","layer", "cov")]#
taxonomy <- read.csv2("taxonomy.csv", stringsAsFactors = FALSE)#
taxonomy <- taxonomy[c("abbr", "taxon")]#
sites <- read.csv2("sites.csv", stringsAsFactors = FALSE)#
#
sites[is.na(sites)] <- ""#
#
#
test <- merge(species, taxonomy,#
	by.x = "abbr", by.y = "abbr",#
	all.x = TRUE)#
#
test <- test[apply(is.na(test), 1, any),]#
if (dim(test)[1] < 1)#
{#
	cat("\nabbreviations checked")#
} else {#
	print(test)#
}#
#
#
dupl <- dim(species)[1] - dim(unique(species[,c(1:3)]))[1]#
#
if (dupl > 0)#
{#
	cat("\nspecies data not unique for", dupl, "sample(s)")#
	cat("\nremoved duplicted sample:\n\n")#
	print(species[duplicated(species[,c(1:3)]),])#
	species <- species[!duplicated(species[,c(1:3)]),]#
} else {#
	cat("\nno duplicates found")#
}#
#
#
if (any(species$cov == "") || is.na(species$cov))#
{#
	cat("\nmissing abandance for observation(s):")#
	species[species$cov == "",]#
}#
#
#
if(all(unique(species$plot) %in% unique(sites$plot))) {#
	species.in.sites <- TRUE#
	cat("\nspecies match sites")	#
} else {#
	species.in.sites <- FALSE#
	warning("\nspecies do not match sites")	#
}#
#
if (all(unique(sites$plot) %in% unique(species$plot))) {#
	cat("\nsites match species")	#
	sites.in.species <- TRUE#
} else {#
	sites.in.species <- FALSE#
	warning("\nsites do not match species")	#
}
species$plot
unique(sites$plot)
sort(unique(sites$plot))
unique(species$plot)
sort(unique(sites$plot))[unique(species$plot)]
sort(unique(sites$plot))[-unique(species$plot)]
	cat("missing species data", test)
	test <- sort(unique(sites$plot))[-unique(species$plot)]
	cat("missing species data", test)
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
setwd("/Users/roli/Documents/vegsoup/testing/berchtesgaden lichen dta")#
#
species <- read.csv2("species.csv", stringsAsFactors = FALSE)#
species <- species[c("plot", "abbr","layer", "cov")]#
taxonomy <- read.csv2("taxonomy.csv", stringsAsFactors = FALSE)#
taxonomy <- taxonomy[c("abbr", "taxon")]#
sites <- read.csv2("sites.csv", stringsAsFactors = FALSE)#
#
sites[is.na(sites)] <- ""#
#
#
test <- merge(species, taxonomy,#
	by.x = "abbr", by.y = "abbr",#
	all.x = TRUE)#
#
test <- test[apply(is.na(test), 1, any),]#
if (dim(test)[1] < 1)#
{#
	cat("\nabbreviations checked")#
} else {#
	print(test)#
}#
#
#
dupl <- dim(species)[1] - dim(unique(species[,c(1:3)]))[1]#
#
if (dupl > 0)#
{#
	cat("\nspecies data not unique for", dupl, "sample(s)")#
	cat("\nremoved duplicted sample:\n\n")#
	print(species[duplicated(species[,c(1:3)]),])#
	species <- species[!duplicated(species[,c(1:3)]),]#
} else {#
	cat("\nno duplicates found")#
}#
#
#
if (any(species$cov == "") || is.na(species$cov))#
{#
	cat("\nmissing abandance for observation(s):")#
	species[species$cov == "",]#
}#
#
#
if(all(unique(species$plot) %in% unique(sites$plot))) {#
	species.in.sites <- TRUE#
	cat("\nspecies match sites")	#
} else {#
	species.in.sites <- FALSE#
	warning("\nspecies do not match sites")	#
}#
#
if (all(unique(sites$plot) %in% unique(species$plot))) {#
	cat("\nsites match species")	#
	sites.in.species <- TRUE#
} else {#
	sites.in.species <- FALSE#
	warning("\nsites do not match species")	#
}
setwd("/Users/roli/Documents/vegsoup/testing/berchtesgaden lichen dta")#
#
species <- read.csv2("species.csv", stringsAsFactors = FALSE)#
species <- species[c("plot", "abbr","layer", "cov")]#
taxonomy <- read.csv2("taxonomy.csv", stringsAsFactors = FALSE)#
taxonomy <- taxonomy[c("abbr", "taxon")]#
sites <- read.csv2("sites.csv", stringsAsFactors = FALSE)#
#
sites[is.na(sites)] <- ""#
#
#
test <- merge(species, taxonomy,#
	by.x = "abbr", by.y = "abbr",#
	all.x = TRUE)#
#
test <- test[apply(is.na(test), 1, any),]#
if (dim(test)[1] < 1)#
{#
	cat("\nabbreviations checked")#
} else {#
	print(test)#
}#
#
#
dupl <- dim(species)[1] - dim(unique(species[,c(1:3)]))[1]#
#
if (dupl > 0)#
{#
	cat("\nspecies data not unique for", dupl, "sample(s)")#
	cat("\nremoved duplicted sample:\n\n")#
	print(species[duplicated(species[,c(1:3)]),])#
	species <- species[!duplicated(species[,c(1:3)]),]#
} else {#
	cat("\nno duplicates found")#
}#
#
#
if (any(species$cov == "") || is.na(species$cov))#
{#
	cat("\nmissing abandance for observation(s):")#
	species[species$cov == "",]#
}#
#
#
if(all(unique(species$plot) %in% unique(sites$plot))) {#
	species.in.sites <- TRUE#
	cat("\nspecies match sites")	#
} else {#
	species.in.sites <- FALSE#
	cat("\nspecies do not match sites")	#
}#
#
if (all(unique(sites$plot) %in% unique(species$plot))) {#
	cat("\nsites match species")	#
	sites.in.species <- TRUE#
} else {#
	sites.in.species <- FALSE#
	cat("\nsites do not match species")	#
}
species.in.sites
if (!species.in.sites)	{#
	species <- species[species$plot %in% unique(sites$plot), ]#
}#
#
if (!sites.in.species)	{#
	test <- sort(unique(sites$plot))[-unique(species$plot)]#
	sites <- sites[sites$plot %in% unique(species$plot), ]	#
	cat("missing species data for plots: ", test)		#
}
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
source("/Users/roli/Dropbox/berchtesgaden lichen/R/MakeRdata.R")
